<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LDY博客</title>
  
  <subtitle>一切尽在不言中</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lkdnjhhb.github.io/"/>
  <updated>2018-12-18T12:02:40.998Z</updated>
  <id>https://lkdnjhhb.github.io/</id>
  
  <author>
    <name>林德雨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://lkdnjhhb.github.io/2018/12/18/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>https://lkdnjhhb.github.io/2018/12/18/希尔排序/</id>
    <published>2018-12-18T11:17:11.015Z</published>
    <updated>2018-12-18T12:02:40.998Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 希尔排序<br>date: 2018-12-18 19:17:10<br>toc: true<br>tags:</p><ul><li>c++</li><li>算法</li><li><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2></li></ul><p>希尔排序是对直接插入排序的一种改进，改进的范围是若排序的关键码基本有序，那么排序的效率将得到提高，希尔排序在数据量较大的情况下算法的时间复杂度比直接插入排序低，空间复杂度相同。希尔排序同直接插入排序折半插入排序相同，是稳定的排序方式。</p><h1 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h1><p>  希尔排序最先处理的问题就是增量的选择，一般情况下增量(d)的初始值为排序元素个数(n)的一半;以后每次进行一次排序d=d/2;d&gt;=1;当d=1时排序完成。同直接插入排序相同，首先应找到一组排序元素的第二个元素，假设第一个元素为有序的，将带插入的排序元素进行保存，当满足插入条件(第一个比他小或者第一个比他大的后一个位置或者走到一组数据的头)时，进行元素的移动和插入。</p><h2 id="java版"><a href="#java版" class="headerlink" title="java版"></a>java版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class Shellsost &#123;</span><br><span class="line">    //下标零当做哨兵进行使用</span><br><span class="line">    public static void soft(int[]array) &#123;</span><br><span class="line">        for(int d=(array.length-1)/2;d&gt;=1;d=d/2) &#123;</span><br><span class="line">            for(int i=d+1;i&lt;array.length;i++) &#123;//d一开始就是带插入的靠后元素</span><br><span class="line">                array[0]=array[i];</span><br><span class="line">                for(int j=i-d;j&gt;0;j=j-d) &#123;</span><br><span class="line">                    if(array[0]&lt;array[j]) &#123;</span><br><span class="line">                        array[j+d]=array[j];</span><br><span class="line">                        array[j]=array[0];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        int []a= &#123;0,9,8,7,6,5,4,3,2,1&#125;;</span><br><span class="line">        Shellsost.soft(a);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="c-版"><a href="#c-版" class="headerlink" title="c++版"></a>c++版</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//array 待排序数组，length元素长度</span><br><span class="line">void Shellsoft(int array[], int length) &#123;</span><br><span class="line">for (int d = length / 2; d &gt;= 1; d = d / 2) &#123;//d一开始为待插入元素</span><br><span class="line">for (int i = d + 1; i &lt;= length; i++) &#123;</span><br><span class="line">array[0] = array[i];</span><br><span class="line">for (int j = i - d; j &gt; 0 &amp;&amp; array[0] &lt; array[j]; j = j - d) &#123;</span><br><span class="line">array[j + d] = array[j];</span><br><span class="line">array[j] = array[0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a[10] = &#123;0,9,8,7,6,5,4,3,2,1&#125;;</span><br><span class="line">    Shellsoft(a, 9);</span><br><span class="line">for (int i = 1; i &lt; 10; i++)cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 希尔排序&lt;br&gt;date: 2018-12-18 19:17:10&lt;br&gt;toc: true&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c++&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;&lt;h2 id=&quot;java&quot;&gt;&lt;a href=&quot;#java&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开闭散列表</title>
    <link href="https://lkdnjhhb.github.io/2018/12/17/%E5%BC%80%E9%97%AD%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <id>https://lkdnjhhb.github.io/2018/12/17/开闭散列表/</id>
    <published>2018-12-17T12:58:48.000Z</published>
    <updated>2018-12-18T12:11:03.075Z</updated>
    
    <content type="html"><![CDATA[<p>首先说明这里的散列表是散列函数(直接定址，除留取余，平方取中，折叠方法，数字分析)在查找技术的应用，散列查找(动态查找，能插入未存在数据)是一种比二分查找，直接查找，二叉排序树查找更高效的一种查找方式，它是基于关键码的映射关系来进行的查找理想情况下，一次对比就能查找到结果，但基于散列函数(映射关系)设计来说，冲突(不同数据拥有相同关键码)是不可避免的，我们能做的就是减少冲突和避免冲突。基于解决冲突的方法就分成了开散列表和闭散列表。开散列表解决冲突的方法是开放地址法，闭散列表解决冲突的方式链地址法其中开放地址法，又被细分为线性探测法，二次探测法，随机探测法。其中常用的就是前两种，解释一下什么是线性探测法，就是当两个数据拥有相同关键码时，靠后入散列表的数据，就一次一次往后移找第一个为空的散列位置，二次探测法，就是探测方法是跳跃式的。闭散列表我们用数组实现，开散列表我们用链表实现，相比较来说开散列表的方式较为简单。</p><h1 id="衡量公式"><a href="#衡量公式" class="headerlink" title="衡量公式"></a>衡量公式</h1><p>  ASL=查找记录的概率*关键码比较次数之和。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>  散列函数采用了除留取余法，除数选择一般是小于或等于表长的质数，表长=记录数/装填因子；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">int data;</span><br><span class="line">node *next;</span><br><span class="line">&#125;;</span><br><span class="line">int H(int key, int mod) &#123;</span><br><span class="line">return key%mod;</span><br><span class="line">&#125;</span><br><span class="line">void CreateHash(node* hash[], int num[],int numlength,int mod) &#123;</span><br><span class="line">for (int i = 0; i &lt; numlength; i++) &#123;</span><br><span class="line">int ideax = H(num[i], mod);</span><br><span class="line">node *s = new node;</span><br><span class="line">s-&gt;data = num[i];</span><br><span class="line">s-&gt;next = hash[ideax];</span><br><span class="line">hash[ideax] = s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int HashSearch(node* hash[], int key, int mod) &#123;</span><br><span class="line">int ideax = H(key, mod);</span><br><span class="line">node*pre = hash[ideax];</span><br><span class="line">while (pre!= NULL&amp;&amp;pre-&gt;data!=key) &#123;</span><br><span class="line">pre = pre-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">if (pre != NULL) return ideax;</span><br><span class="line">else &#123;</span><br><span class="line">node *s = new node;</span><br><span class="line">s-&gt;data = key;</span><br><span class="line">s-&gt;next = hash[ideax];</span><br><span class="line">hash[ideax] = s;</span><br><span class="line">cout &lt;&lt; &quot;成功插入&quot; &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">node *hash[11];</span><br><span class="line">for (int i = 0; i &lt; 11; i++) &#123;</span><br><span class="line">hash[i] = NULL;</span><br><span class="line">&#125;</span><br><span class="line">int mod = 11;</span><br><span class="line">int num[] = &#123; 47,7,29,11,16,92,22,8,3 &#125;;</span><br><span class="line">int numlength = 9;</span><br><span class="line">CreateHash(hash, num,numlength,mod);</span><br><span class="line">int key = 11;</span><br><span class="line">cout&lt;&lt;HashSearch(hash, key, mod)&lt;&lt;endl;</span><br><span class="line">key = 33;</span><br><span class="line">cout&lt;&lt;HashSearch(hash, key, mod)&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>闭散列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//散列地址计算函数</span><br><span class="line">int H(int key,int mod) &#123;</span><br><span class="line">return key%mod;</span><br><span class="line">&#125;</span><br><span class="line">//闭散列表构造函数</span><br><span class="line">void CreatHashMap(int num[],int hk[]) &#123;</span><br><span class="line">for (int i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">int ideax = H(num[i], 11);</span><br><span class="line">if (hk[ideax] == 0) hk[ideax] = num[i];</span><br><span class="line">else &#123;</span><br><span class="line">for (int j = 1; j &lt; 11 - 1; j++) &#123;</span><br><span class="line">ideax = H(ideax + j, 11);</span><br><span class="line">if (hk[ideax] == 0) &#123;</span><br><span class="line">hk[ideax] = num[i];</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//散列表 余数 关键码</span><br><span class="line">int HashSearch(int hk[], int m, int key) &#123;</span><br><span class="line">int ideax = H(key, 11);</span><br><span class="line">if (hk[ideax] == key) &#123; cout &lt;&lt; &quot;查找成功&quot; &lt;&lt; &quot; &quot;; return ideax; &#125;</span><br><span class="line">else if (hk[ideax] == 0) &#123; hk[ideax] = key; cout &lt;&lt; &quot;成功插入&quot; &lt;&lt; &quot; &quot;; return ideax; &#125;</span><br><span class="line">int ideax1 = H(ideax + 1, 11);</span><br><span class="line">while (hk[ideax1] != 0 &amp;&amp; ideax1 != ideax) &#123;</span><br><span class="line">if (hk[ideax1] == key) &#123; cout &lt;&lt; &quot;查找成功&quot; &lt;&lt; &quot; &quot;; return ideax1; &#125;</span><br><span class="line">else ideax1 = H(ideax1 + 1, 11);</span><br><span class="line">&#125;</span><br><span class="line">if (ideax1 == ideax) throw&quot;溢出&quot;;</span><br><span class="line">else &#123; hk[ideax1] = key; cout &lt;&lt; &quot;成功插入&quot; &lt;&lt; &quot; &quot;; return ideax1; &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int num[9];</span><br><span class="line">int hk[11] = &#123;0&#125;;</span><br><span class="line">for (int i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">cin &gt;&gt; num[i];</span><br><span class="line">&#125;</span><br><span class="line">CreatHashMap(num, hk);</span><br><span class="line">cout&lt;&lt;HashSearch(hk, 11, 22);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先说明这里的散列表是散列函数(直接定址，除留取余，平方取中，折叠方法，数字分析)在查找技术的应用，散列查找(动态查找，能插入未存在数据)是一种比二分查找，直接查找，二叉排序树查找更高效的一种查找方式，它是基于关键码的映射关系来进行的查找理想情况下，一次对比就能查找到结果，
      
    
    </summary>
    
      <category term="c++/算法" scheme="https://lkdnjhhb.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="https://lkdnjhhb.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法1-直接插入排序和折半查找排序</title>
    <link href="https://lkdnjhhb.github.io/2018/12/17/%E5%B8%B8%E8%A7%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%951/"/>
    <id>https://lkdnjhhb.github.io/2018/12/17/常见排序算法1/</id>
    <published>2018-12-17T12:52:29.000Z</published>
    <updated>2018-12-18T12:08:29.583Z</updated>
    
    <content type="html"><![CDATA[<p>直接插入排序和折半插入排序都很简单，就是前n个元素为有序序列，将&gt;n的元素通过比较，移动元素，找到指定位置进行插入，首先说明一下一个元素本省就是有序的，我们可以从第一个元素之后依次进行直接插入排序，折半查找排序是对直接插入排序的一种优化，优化在一开始寻找插入位置比较的次数，但它并不影响移动的次数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void InsertSost(int array[],int length) &#123;</span><br><span class="line">for (int i = 2; i &lt;= length; i++) &#123;</span><br><span class="line">//0号位置一开始不存放元素当监察哨</span><br><span class="line">array[0] = array[i];</span><br><span class="line">int j = 0;</span><br><span class="line">//从后向前比较如果当前元素值大于将要插入的值进行后移</span><br><span class="line">for ( j = i - 1; j &gt; 0; j--) &#123;</span><br><span class="line">if (array[0] &lt; array[j])</span><br><span class="line">array[j + 1] = array[j];</span><br><span class="line">&#125;</span><br><span class="line">//找到插入位置在插入位置后方插入当前元素</span><br><span class="line">array[j + 1] = array[0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void BinInsertSoft(int array[], int length) &#123;</span><br><span class="line"></span><br><span class="line">for (int i = 2; i &lt;=length; i++) &#123;</span><br><span class="line">int low = 1; int hig = i; int mid;</span><br><span class="line">array[0] = array[i];</span><br><span class="line">int j = 0;</span><br><span class="line">while (low &lt;= hig) &#123;</span><br><span class="line">mid = (hig + low) / 2;</span><br><span class="line">if (array[mid] == array[i]) &#123; j = mid + 1; break; &#125;</span><br><span class="line">else if (array[mid] &gt; array[i]) &#123; hig = mid - 1; &#125;</span><br><span class="line">else if (array[mid] &lt; array[i]) &#123; low = mid + 1; &#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int k = i - 1; k &gt; j; k--) array[k + 1] = array[k];</span><br><span class="line">array[j + 1] = array[0];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int a[11] = &#123; 0,10,9,8,7,6,5,4,3,2,1 &#125;;</span><br><span class="line">//InsertSost(a, 10);</span><br><span class="line">BinInsertSoft(a, 10);</span><br><span class="line">for (int i = 1; i &lt; 11; i++)</span><br><span class="line">cout &lt;&lt; a[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接插入排序和折半插入排序都很简单，就是前n个元素为有序序列，将&amp;gt;n的元素通过比较，移动元素，找到指定位置进行插入，首先说明一下一个元素本省就是有序的，我们可以从第一个元素之后依次进行直接插入排序，折半查找排序是对直接插入排序的一种优化，优化在一开始寻找插入位置比较的
      
    
    </summary>
    
      <category term="c++/算法" scheme="https://lkdnjhhb.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="https://lkdnjhhb.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>java实现走迷宫问题</title>
    <link href="https://lkdnjhhb.github.io/2018/12/07/java%E5%AE%9E%E7%8E%B0%E8%B5%B0%E8%BF%B7%E5%AE%AB%E9%97%AE%E9%A2%98/"/>
    <id>https://lkdnjhhb.github.io/2018/12/07/java实现走迷宫问题/</id>
    <published>2018-12-07T12:34:49.000Z</published>
    <updated>2018-12-07T12:47:02.206Z</updated>
    
    <content type="html"><![CDATA[<p>回溯法的基本思想是：对一个包括有很多结点，每个结点有若干个搜索分支的问题，把原问题分解为对若干个子问题求解的算法。当搜索到某个结点、发现无法再继续搜索下去时，就让搜索过程回溯（即退回）到该结点的前一结点，继续搜索这个结点的其他尚未搜索过的分支；如果发现这个结点也无法再继续搜索下去时，就让搜索过程回溯到这个结点的前一结点继续这样的搜索过程；这样的搜索过程一直进行到搜索到问题的解或搜索完了全部可搜索分支没有解存在为止。</p><p>　　该方法可以使用堆栈实现。也可以使用递归实现，递归实现的话代码比较简单，较难理解建议自己打断点一步步跟踪理解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static int count=0;</span><br><span class="line">    public static List&lt;Luji&gt; list=new ArrayList&lt;Luji&gt;();//集合容器放可行点组成路径</span><br><span class="line">    public static void DFS(int [][]arc,int[][] visit,int i1,int i2,int i3,int i4) &#123;</span><br><span class="line">    if(i1&lt;0||i2&lt;0||i1&gt;4||i2&gt;3) return;//下标超出迷宫点直接返回上一成</span><br><span class="line">        if(arc[i1][i2]==0) &#123;</span><br><span class="line">        visit[i1][i2]=1;//表示此点不可走 以后也不走</span><br><span class="line">        return;&#125;//当前元素为零表示不可走</span><br><span class="line">    if(i1==i3&amp;&amp;i2==i4) &#123;//如果传递参数等于i3,i4,表示找到出路执行输出，输出路径</span><br><span class="line">    System.out.println(&quot;------------------&quot;);</span><br><span class="line">    for(Luji s:list) &#123;</span><br><span class="line">    System.out.print(&quot;(&quot;+s.x+&quot;,&quot;+s.y+&quot;)&quot;+&quot;-&gt;&quot;);</span><br><span class="line">        &#125;//遍历集合元素输出</span><br><span class="line">    System.out.println(&quot;(&quot;+(i1+1)+&quot;,&quot;+(i2+1)+&quot;)&quot;);</span><br><span class="line">    count++;</span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line">    if(arc[i1][i2]==1)&#123;</span><br><span class="line">    if(visit[i1][i2]==0) &#123;//如果没有这一步则会在下面的递归中回到上一步陷入死循环</span><br><span class="line">    visit[i1][i2]=1;//代表路径被走，不可在访问</span><br><span class="line">        list.add(new Luji(i1+1, i2+1));//加入路径</span><br><span class="line">    DFS(arc, visit, i1, i2-1, i3, i4);</span><br><span class="line">    DFS(arc, visit, i1-1, i2, i3, i4);</span><br><span class="line">            DFS(arc, visit, i1, i2+1, i3, i4);</span><br><span class="line">        DFS(arc, visit, i1+1, i2, i3, i4);</span><br><span class="line">        list.remove(list.size()-1);</span><br><span class="line">    visit[i1][i2]=0;//它的上下左右被走完路径，该点在赋值为没被访问</span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">   Scanner scanner=new Scanner(System.in);</span><br><span class="line">   int m;</span><br><span class="line">       int n;</span><br><span class="line">       m=scanner.nextInt();</span><br><span class="line">       n=scanner.nextInt();</span><br><span class="line">       int [][] arc=new int[m][n];//边集数组</span><br><span class="line">       for(int i=0;i&lt;m;i++) &#123;</span><br><span class="line">       for(int j=0;j&lt;n;j++) &#123;</span><br><span class="line">       arc[i][j]=scanner.nextInt();//为边集初始化</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        //出发点</span><br><span class="line">       int i1=scanner.nextInt();</span><br><span class="line">       int i2=scanner.nextInt();</span><br><span class="line">        //终点</span><br><span class="line">       int i3=scanner.nextInt();</span><br><span class="line">       int i4=scanner.nextInt();</span><br><span class="line">        //顶点有无被走标记数组</span><br><span class="line">       int[][]visit=new int[m][n];</span><br><span class="line">       int[][]maze=new int[m][n];</span><br><span class="line">       DFS(arc, visit, i1-1, i2-1, i3-1, i4-1);</span><br><span class="line">       System.out.println(count+&quot;条道路&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Luji&#123;</span><br><span class="line">int x;</span><br><span class="line">int y;</span><br><span class="line">    public Luji() &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public Luji(int x,int y) &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">    this.x=x;</span><br><span class="line">    this.y=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;回溯法的基本思想是：对一个包括有很多结点，每个结点有若干个搜索分支的问题，把原问题分解为对若干个子问题求解的算法。当搜索到某个结点、发现无法再继续搜索下去时，就让搜索过程回溯（即退回）到该结点的前一结点，继续搜索这个结点的其他尚未搜索过的分支；如果发现这个结点也无法再继续搜
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java多线程-Thread</title>
    <link href="https://lkdnjhhb.github.io/2018/12/06/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-Thread/"/>
    <id>https://lkdnjhhb.github.io/2018/12/06/java多线程-Thread/</id>
    <published>2018-12-06T12:53:34.000Z</published>
    <updated>2018-12-06T12:55:05.233Z</updated>
    
    <content type="html"><![CDATA[<p>1.介绍线程时先解释一下什么是线程，进程，毕竟这两个概念十分相像，进程通俗来讲就是在计算机中执行的程序，一个程序就是一个进程，线程是进程的细分，进程可以包含多个线程，对于线程还有更细的划分，名字叫纤程，一个计算机可以同时执行多个进程任务，一个进程可以同时执行线程任务，但严格来说这样是不对的，它们都是去抢占计算机的资源（cpu ,IO,寄存器…）来去执行的，严格来说，一个计算机在某一时间只能执行一个进程，一个进程内只能执行一个线程，只是因为计算机的运算，和进程或进程的抢占时间的短，快，造成了同时执行的假象。新建状态（New）：当线程对象对创建后，即进入了新建状态，如：Thread t = new MyThread();</p><p>就绪状态（Runnable）：当调用线程对象的start()方法（t.start();），线程即进入就绪状态。处于就绪状态的线程，只是说明此线程已经做好了准备，随时等待CPU调度执行，并不是说执行了t.start()此线程立即就会执行；</p><p>运行状态（Running）：当CPU开始调度处于就绪状态的线程时，此时线程才得以真正执行，即进入到运行状态。注：就     绪状态是进入到运行状态的唯一入口，也就是说，线程要想进入运行状态执行，首先必须处于就绪状态中；</p><p>阻塞状态（Blocked）：处于运行状态中的线程由于某种原因，暂时放弃对CPU的使用权，停止执行，此时进入阻塞状态，直到其进入到就绪状态，才 有机会再次被CPU调用以进入到运行状态。根据阻塞产生的原因不同，阻塞状态又可以分为三种：</p><p>1.等待阻塞：运行状态中的线程执行wait()方法，使本线程进入到等待阻塞状态；</p><p>2.同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态；</p><p>3.其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p><p>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。<br>2.经过上面的简单介绍下相信大家也对进程和线程有了一些认识，下面给大家介绍一下java中的线程（Thread）java中的线程从Java1.0就出现，一直在被完善。下面给大家介绍一下线程的构造方法：<br>   (1) 继承Thread类来实现线程的构造<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Thread1 extends Thread&#123;</span><br><span class="line">//用这种方法构造线程是要对run方法重写</span><br><span class="line">   public  void  run() &#123;</span><br><span class="line">System.out.println(this.getName());</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        Thread1 thread1=new Thread1();</span><br><span class="line">        Thread1 thread2=new Thread1();</span><br><span class="line">        thread1.start();//start方法用来开启线程来自父类</span><br><span class="line">        thread2.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在用继承Thread类时实现线程时必须重写run方法，它是线程开始后执行的方法，调用start方法就是线程进入了就绪状态准备执行。<br>   (2)实现Runnable接口来实现线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class MyRunnable implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;static-access&quot;)//压制警告</span><br><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">        Thread thread=new Thread(new MyRunnable());</span><br><span class="line">thread.start();</span><br><span class="line">thread.sleep(1000);</span><br><span class="line">System.out.println(thread.isAlive());</span><br><span class="line">thread.join();</span><br><span class="line">System.out.println(thread.isAlive());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">//输出当前执行线程的名字</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外还有一种有返回值的方法就简单介绍一下使用Callable和Future接口创建线程。具体是创建Callable接口的实现类，并实现clall()方法。并使用FutureTask类来包装Callable实现类的对象，且以此FutureTask对象作为Thread对象的target来创建线程。<br>我先说一下Runnable是一个函数式编程接口(接口中方法都是公共的)，我先说一下一个有意思的地方Thread类在实现的时候也继承了Runnable接口。并且此接口有利于数据共享。下面为大家举个例子来说明这个问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">   protected int tickets=50;</span><br><span class="line">   public void run() &#123;</span><br><span class="line">   while(this.tickets&gt;0) &#123;</span><br><span class="line">   System.out.println(this.getName()+&quot;正在卖票&quot;+tickets--);</span><br><span class="line">   &#125;</span><br><span class="line">   if(this.tickets==0)</span><br><span class="line">System.out.println(&quot;票卖完了&quot;);   </span><br><span class="line">   &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread myThread1=new MyThread();</span><br><span class="line">myThread1.setName(&quot;售票员1&quot;);</span><br><span class="line">MyThread myThread2=new MyThread();</span><br><span class="line">myThread2.setName(&quot;售票员2&quot;);</span><br><span class="line">MyThread myThread3=new MyThread();</span><br><span class="line">myThread3.setName(&quot;售票员3&quot;);</span><br><span class="line">MyThread myThread4=new MyThread();</span><br><span class="line">myThread4.setName(&quot;售票员4&quot;);</span><br><span class="line">        myThread1.start();</span><br><span class="line">        myThread2.start();</span><br><span class="line">        myThread3.start();</span><br><span class="line">        myThread4.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上例运行结果：出现了多人卖同一张票的情况，相同的票数数据没有实现共享，有人说了你这四个各不相干的线程当然会出现这种问题，但是我们最初的设计是票数数据是公共的，写死的，这时候用Runnable就能较好解决这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class MyThread2 implements Runnable &#123;</span><br><span class="line">    protected   int tickets=50;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">MyThread2 mt=new MyThread2();</span><br><span class="line">new Thread(mt, &quot;售票员1&quot;).start();</span><br><span class="line">new Thread(mt, &quot;售票员2&quot;).start();</span><br><span class="line">new Thread(mt, &quot;售票员3&quot;).start();</span><br><span class="line">new Thread(mt, &quot;售票员4&quot;).start();</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">while(this.tickets&gt;0) &#123;</span><br><span class="line">   System.out.println(Thread.currentThread().getName()+&quot;正在卖票&quot;+tickets--);</span><br><span class="line">   &#125;</span><br><span class="line">   if(this.tickets==0)</span><br><span class="line">System.out.println(&quot;票卖完了&quot;);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由上述代码成功解决票数数据共享的问题。<br>  (3)下面为大家解释一下线程同步的问题，先举个例子来说明一下线程同步在一些方面的重要作用，比如去银行取钱，存钱，这就要去同一时间只有一个人能操作这一张银行卡，否则很容易造成资金的问题，那么解决这个问题就用到了线程同步概念，所谓线程同步就是某一时刻只能有一个线程来操作共享的数据资源。实现方式有两种，同步代码块，同步方法。实现同步方法非常简单，它自需要在你同步的方法前插入 synchronized 关键字 如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public synchronized 返回类型 方法名(参数)</span><br></pre></td></tr></table></figure></p><p>同步代码块只要在你所同步的代码使用如下形式<br>`synchronized{代码块}<br>大部分情况下还是使用异步线程(网站访问)<br>  (4)最后给大家简要介绍一下死锁的问题，死锁的形成多是由程序逻辑错误造成的线程访问僵持问题，两个线程互相挟制卡死，程序开发中应避免出现死锁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.介绍线程时先解释一下什么是线程，进程，毕竟这两个概念十分相像，进程通俗来讲就是在计算机中执行的程序，一个程序就是一个进程，线程是进程的细分，进程可以包含多个线程，对于线程还有更细的划分，名字叫纤程，一个计算机可以同时执行多个进程任务，一个进程可以同时执行线程任务，但严格
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java实现AOV网拓扑排序</title>
    <link href="https://lkdnjhhb.github.io/2018/12/06/java%E5%AE%9E%E7%8E%B0AOV%E7%BD%91%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <id>https://lkdnjhhb.github.io/2018/12/06/java实现AOV网拓扑排序/</id>
    <published>2018-12-06T12:53:34.000Z</published>
    <updated>2018-12-07T06:00:57.602Z</updated>
    
    <content type="html"><![CDATA[<p>AOV网（Activity On Vertex Network )</p><p>网：带权图。若在带权的有向图中，以顶点表示事件，以边（或者弧）表示活动，弧的权值表示活动的开销，则此带权有向图称为用边表示活动的网，简称：（AOV网（Activity On Vertex Network )。</p><p>关键路径</p><p>如果用AOV网表示一个工程，那么正常情况下工程只有一个开始点和一个结束点，因此AOV网中只有一个入度为0的点，称为源点；一个出度为0的点，称为汇点。<br>AOV网具有以下两个性质：<br>1、只有在某顶点所代表的事情发生后，从该顶点出发的弧所代表的活动才能开始。<br>2、只有在进入某顶点的各弧所代表的活动都已经结束时，该顶点所代表的事情才能发生。</p><p>由于AOV网中的某些活动可以并行进行，所以完成整个工程最短时间是从源点到汇点的最大路径长度。具有最大路径长度的路径称为关键路径，关键路径上的活动称为关键活动。</p><p>一个无环的有向图称为有向无环图，在AOV网中不存在有向环（或者称有向回路）</p><p>对于给定的AOV网，首先判断网中是否存在环路，只有有向无环图才具有现实意义。检查AOV网中是否存在回路的方法就是拓扑排序。</p><p>拓扑排序后，会得到一个有向图的顶点序列。</p><p>拓扑排序的实现</p><p>1、从网中选择一个没有前驱的顶点（入度为0）并且输出它。<br>2、从网中删去该顶点，并且删去从该顶点发出的全部有向边<br>3、重复上述两步，直到剩余的网中不存在没有前驱的顶点为止。</p><p>此操作有两种结果： 一、网中全部顶点都被输出，这说明网中不存在有向回路； 二、网中顶点未被全部输出，剩余的顶点均有前驱顶点，这说明网中存在有向回路<br>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">import java.util.Stack;</span><br><span class="line"></span><br><span class="line">class Node&#123;</span><br><span class="line">//边表结构体声明</span><br><span class="line">int ideax;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line">class GraphNode&#123;</span><br><span class="line">//点集结构体声明</span><br><span class="line">int in;</span><br><span class="line">char vertex;</span><br><span class="line">Node firstedge=null;</span><br><span class="line">&#125;</span><br><span class="line">//图的声明</span><br><span class="line">public class Graph &#123;</span><br><span class="line">//图的构造函数</span><br><span class="line">    public Graph(int vertexnum,int arcnum)&#123;</span><br><span class="line">    Scanner scanner=new Scanner(System.in);</span><br><span class="line">    this.vertexnum=vertexnum;</span><br><span class="line">    this.arcnum=arcnum;</span><br><span class="line">    System.out.println(&quot;输入顶点集:&quot;);</span><br><span class="line">    for(int i=0;i&lt;this.vertexnum;i++) &#123;</span><br><span class="line">    GraphNode s=new GraphNode();</span><br><span class="line">    s.vertex=scanner.next().charAt(0);</span><br><span class="line">    graphNodes[i]=s;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;输入边集:&quot;);</span><br><span class="line">    for(int i=0;i&lt;this.arcnum;i++) &#123;</span><br><span class="line">    char ch1=scanner.next().charAt(0);</span><br><span class="line">    char ch2=scanner.next().charAt(0);</span><br><span class="line">    Node s=new Node();</span><br><span class="line">    s.ideax=getideax(ch2);</span><br><span class="line">    s=this.graphNodes[getideax(ch1)].firstedge;</span><br><span class="line">    this.graphNodes[getideax(ch1)].firstedge=s;</span><br><span class="line">    graphNodes[getideax(ch2)].in++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public int getideax(char ch) &#123;</span><br><span class="line">    for(int i=0;i&lt;this.vertexnum;i++) &#123;</span><br><span class="line">    if(ch==this.graphNodes[i].vertex) &#123;</span><br><span class="line">    return i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //AOV网拓扑排序算法</span><br><span class="line">    public void TopSoft() &#123;</span><br><span class="line">        int count=0;</span><br><span class="line">    Stack&lt;Integer&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">    for(int i=0;i&lt;this.vertexnum;i++) &#123;</span><br><span class="line">    if(this.graphNodes[i].in==0) &#123;</span><br><span class="line">    stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while(stack.isEmpty()==false) &#123;</span><br><span class="line">    Integer i=stack.pop();</span><br><span class="line">    System.out.print(graphNodes[i].vertex+&quot; &quot;);</span><br><span class="line">    count++;</span><br><span class="line">    Node p=this.graphNodes[i].firstedge;</span><br><span class="line">    while(p!=null) &#123;</span><br><span class="line">    int j=p.ideax;</span><br><span class="line">    this.graphNodes[j].in--;</span><br><span class="line">    if(this.graphNodes[j].in==0)</span><br><span class="line">    stack.push(j);</span><br><span class="line">    p=p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    if(count&lt;this.vertexnum)</span><br><span class="line">    System.out.println(&quot;有回路&quot;);</span><br><span class="line">    else</span><br><span class="line">    System.out.println(&quot;无回路&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //图的顶点个数边的个数声明</span><br><span class="line">private int vertexnum=50;</span><br><span class="line">private int arcnum;</span><br><span class="line">//顶点数组</span><br><span class="line">    private GraphNode[] graphNodes=new GraphNode[vertexnum];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">  Scanner scanner=new Scanner(System.in);</span><br><span class="line">  int vertexnum=scanner.nextInt();</span><br><span class="line">  int arcnum=scanner.nextInt();</span><br><span class="line">      Graph graph=new Graph(vertexnum, arcnum);</span><br><span class="line">      graph.TopSoft();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AOV网（Activity On Vertex Network )&lt;/p&gt;
&lt;p&gt;网：带权图。若在带权的有向图中，以顶点表示事件，以边（或者弧）表示活动，弧的权值表示活动的开销，则此带权有向图称为用边表示活动的网，简称：（AOV网（Activity On Vertex Ne
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java多线程-生产者与消费者模型</title>
    <link href="https://lkdnjhhb.github.io/2018/12/06/java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BB%8F%E5%85%B8%E6%A8%A1%E5%9E%8B--%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%8E%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <id>https://lkdnjhhb.github.io/2018/12/06/java 多线程经典模型--生产者与消费者模型/</id>
    <published>2018-12-06T12:53:34.000Z</published>
    <updated>2018-12-06T15:03:32.798Z</updated>
    
    <content type="html"><![CDATA[<p>﻿生产者与消费者模型是Java多线程经典模型，它的主要意思是有一个公共的商品区，生产者项商品区生产商品，消费者从中取走商品，最理想的状态就是生产者生产一个商品消费者就从商品中取走一个商品，二者同时执行，所以采用多线程机制，随着多线程的使用就容易产生商品取出错误，商品生产重复问题，能有效解决此问题的方式就是线程的等待与唤醒加静态代码块。有必要说明一下线程的等待和唤醒都是Object类的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">class InFo&#123;</span><br><span class="line">//商品</span><br><span class="line">private String name;</span><br><span class="line">private String money;</span><br><span class="line">private boolean flag=true;//布尔标记控制线程的等待与唤醒</span><br><span class="line">//静态方法保证操作同一不会出现输出和赋值不同意匹配的问题</span><br><span class="line">public synchronized void set(String name,String money) &#123;</span><br><span class="line">if(flag==false) &#123;//说明不能生产</span><br><span class="line">try &#123;</span><br><span class="line">super.wait();//object类中的方法让此线程进入等待状态</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;&#125;</span><br><span class="line">//没有等待或者等待状态结束执行赋值</span><br><span class="line">this.name=name;</span><br><span class="line">this.money=money;</span><br><span class="line">//修改标记等待取走商品</span><br><span class="line">this.flag=false;</span><br><span class="line">//唤醒其他等待线程</span><br><span class="line">super.notify();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public synchronized void get() &#123;</span><br><span class="line">   if(flag==true) &#123;//表明此刻正在生产不能取出商品</span><br><span class="line">try &#123;</span><br><span class="line">//现场进入等待状态</span><br><span class="line">super.wait();</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;&#125;</span><br><span class="line">System.out.println(this.name+&quot;--&quot;+this.money);</span><br><span class="line">//标记修改等待生产商品</span><br><span class="line">flag=true;</span><br><span class="line">//唤醒其他等待线程也是来自object类的方法</span><br><span class="line">super.notify();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Produce implements Runnable&#123;</span><br><span class="line">protected InFo inFo;</span><br><span class="line">     public Produce(InFo inFo) &#123;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">    this.inFo=inFo;</span><br><span class="line">     &#125;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(int i=0;i&lt;100;i++) &#123;</span><br><span class="line">if(i%2==0) &#123;</span><br><span class="line">inFo.set(&quot;apple&quot;, &quot;15&quot;);&#125;</span><br><span class="line">else&#123;</span><br><span class="line">inFo.set(&quot;banana&quot;, &quot;25&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Custom implements Runnable&#123;</span><br><span class="line">private InFo info;</span><br><span class="line">public Custom(InFo inFo) &#123;</span><br><span class="line">this.info=inFo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for(int i=0;i&lt;100;i++) &#123;</span><br><span class="line">info.get();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">        InFo inFo=new InFo();</span><br><span class="line">        new Thread(new Produce(inFo)).start();;</span><br><span class="line">new Thread(new Custom(inFo)).start();;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;﻿生产者与消费者模型是Java多线程经典模型，它的主要意思是有一个公共的商品区，生产者项商品区生产商品，消费者从中取走商品，最理想的状态就是生产者生产一个商品消费者就从商品中取走一个商品，二者同时执行，所以采用多线程机制，随着多线程的使用就容易产生商品取出错误，商品生产重复
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>求差集</title>
    <link href="https://lkdnjhhb.github.io/2018/12/04/%E6%B1%82%E5%B7%AE%E9%9B%86/"/>
    <id>https://lkdnjhhb.github.io/2018/12/04/求差集/</id>
    <published>2018-12-04T05:11:03.000Z</published>
    <updated>2018-12-04T05:18:05.994Z</updated>
    
    <content type="html"><![CDATA[<p>【问题描述】两个集合的差集定义如下：<br>集合A、B的差集，由所有属于A但不属于B的元素构成。<br>输入两个集合A、B，每个集合中元素都是自然数。求集合A、B的差集。<br>【输入形式】<br>从标准输入接收集合中的自然数元素，以空格分隔。-1表示输入结束。<br>其中，每个集合都不输入重复的元素。<br>【输出形式】<br>输出差运算后集合中的元素，以空格分隔。输出元素的顺序与原有集合A输入的顺序一致。<br>如果A、B的差集为空集，则不输出任何数值。<br>【样例输入】<br>2 8 3 4 -1<br>6 1 4 9 -1<br>【样例输出】<br>2 8 3<br>本题在存储时采用了集合ArrayList,因为事先不知道元素个数。因为此题在求解时要频繁访问比较，所以使用ArrayList有利于提高访问速度。本题求差集时要进行元素对比，具体实现在DifferenceSet方法中<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test3 &#123;</span><br><span class="line">static void print(List&lt;Integer&gt; list) &#123;</span><br><span class="line">for(Integer i:list) &#123;</span><br><span class="line">        System.out.print(i+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">static void DifferenceSet(List&lt;Integer&gt; list1,List&lt;Integer&gt; list2,List&lt;Integer&gt; list3) &#123;</span><br><span class="line"> boolean flag=true;</span><br><span class="line">        int  n=0;</span><br><span class="line">        while(n&lt;list1.size()) &#123;</span><br><span class="line">        flag=true;</span><br><span class="line">        Integer j=list1.get(n);</span><br><span class="line">        int m=0;</span><br><span class="line">        Integer k;</span><br><span class="line">        while (m&lt;list2.size()) &#123;</span><br><span class="line">                k=list2.get(m);</span><br><span class="line">        if(j==k) &#123;</span><br><span class="line">           flag=false;</span><br><span class="line">           break;</span><br><span class="line">        &#125;</span><br><span class="line">        m=m+1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(flag==true) &#123;</span><br><span class="line">        list3.add(list1.get(n));</span><br><span class="line">        &#125;</span><br><span class="line">        n++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">List&lt;Integer&gt; list1=new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list2=new ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list3=new ArrayList&lt;&gt;();</span><br><span class="line">        Scanner scanner1 = new Scanner(System.in);</span><br><span class="line">Integer i;</span><br><span class="line">        do &#123;</span><br><span class="line">        i=scanner1.nextInt();</span><br><span class="line">        if(i!=-1) list1.add(i);</span><br><span class="line">        &#125;while(i!=-1);</span><br><span class="line">        do &#123;</span><br><span class="line">        i=scanner1.nextInt();</span><br><span class="line">        if(i!=-1) list2.add(i);</span><br><span class="line">        &#125;while(i!=-1);</span><br><span class="line">        DifferenceSet(list1, list2, list3);</span><br><span class="line">        if(list3.isEmpty()==false) &#123;</span><br><span class="line">          print(list3);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【问题描述】两个集合的差集定义如下：&lt;br&gt;集合A、B的差集，由所有属于A但不属于B的元素构成。&lt;br&gt;输入两个集合A、B，每个集合中元素都是自然数。求集合A、B的差集。&lt;br&gt;【输入形式】&lt;br&gt;从标准输入接收集合中的自然数元素，以空格分隔。-1表示输入结束。&lt;br&gt;其中
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>字符串中字符排序</title>
    <link href="https://lkdnjhhb.github.io/2018/12/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%AD%97%E7%AC%A6%E6%8E%92%E5%BA%8F/"/>
    <id>https://lkdnjhhb.github.io/2018/12/04/字符串中字符排序/</id>
    <published>2018-12-04T05:02:31.000Z</published>
    <updated>2018-12-04T05:10:02.597Z</updated>
    
    <content type="html"><![CDATA[<p>【问题描述】编写一个程序，从键盘接收一个字符串，然后按照字符顺序从小到大进行排序，并删除重复的字符。<br>【输入形式】用户在第一行输入一个字符串。<br>【输出形式】程序按照字符(ASCII)顺序从小到大排序字符串，并删除重复的字符进行输出。<br>【样例输入】badacgegfacb<br>【样例输出】abcdefg<br>【样例说明】用户输入字符串badacgegfacb，程序对其进行按从小到大(ASCII)顺序排序，并删除重复的字符，最后输出为abcdefg<br>题目描述清晰，本题解题时应先将字符串转变成字符数组，然后在对字符数组进行排序去重，具体分为了2个小函数。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test2 &#123;</span><br><span class="line">    static void  soft(char []ch) &#123;</span><br><span class="line">    for(int i=0;i&lt;ch.length-1;i++) &#123;</span><br><span class="line">    for(int j=0;j&lt;ch.length-i-1;j++) &#123;</span><br><span class="line">    if(ch[j]&gt;ch[j+1]) &#123;</span><br><span class="line">    char c=ch[j];</span><br><span class="line">    ch[j]=ch[j+1];</span><br><span class="line">    ch[j+1]=c;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    static void overwrite(char[]ch) &#123;</span><br><span class="line">        char []ch2=new char[ch.length];</span><br><span class="line">        ch2[0]=ch[0];</span><br><span class="line">        int length=1;</span><br><span class="line">        for(int i=1;i&lt;ch.length;i++) &#123;</span><br><span class="line">        if(ch[i]!=ch[i-1]) ch2[length++]=ch[i];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=0;i&lt;length;i++)</span><br><span class="line">        System.out.print(ch2[i]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Scanner scanner=new Scanner(System.in);</span><br><span class="line">String string;</span><br><span class="line">string=scanner.nextLine();</span><br><span class="line">char []ch=string.toCharArray();</span><br><span class="line">        soft(ch);</span><br><span class="line">        overwrite(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【问题描述】编写一个程序，从键盘接收一个字符串，然后按照字符顺序从小到大进行排序，并删除重复的字符。&lt;br&gt;【输入形式】用户在第一行输入一个字符串。&lt;br&gt;【输出形式】程序按照字符(ASCII)顺序从小到大排序字符串，并删除重复的字符进行输出。&lt;br&gt;【样例输入】badac
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>集合 Arrlist</title>
    <link href="https://lkdnjhhb.github.io/2018/12/04/%E9%9B%86%E5%90%88-Arrlist/"/>
    <id>https://lkdnjhhb.github.io/2018/12/04/集合-Arrlist/</id>
    <published>2018-12-04T05:00:50.000Z</published>
    <updated>2018-12-04T05:01:47.055Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述】对分行输入的若干字符串按字典序（由小到大）进行排序并输出。<br>【输入形式】控制台输入多行字符串，各个字符串可能含有空格，以#结束<br>【输出形式】输出按字典序（由小到大）进行排序后的字符串。<br>【样例输入】<br>zwtr<br>fhoenf<br>hefe<br>afe geg<br>#</p><p>【样例输出】<br>afe geg<br>fhoenf<br>hefe<br>zwtr<br>【样例说明】输入多行字符串：<br>zwtr<br>fhoenf<br>hefe<br>afe geg<br>#</p><p>输出字典序的字符串为：<br>afe geg<br>fhoenf<br>hefe<br>zwtr</p><p>题目描述很清晰，就是对一组字符串进行字典排序，然后进行格式输出。因为不知道一开始不知道有多少字符串进行输入排序，所以本题采用了用集合容器来进行字符串的存储，<br>因为string类型继承实现了compare方法，所以此题直接采用了调取集合排序方法（collection.soft(list)）。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Test1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Scanner scanner=new Scanner(System.in);</span><br><span class="line">        List&lt;String&gt; linklist=new LinkedList&lt;&gt;();</span><br><span class="line">        String string;</span><br><span class="line">        do &#123;</span><br><span class="line">            string=scanner.nextLine();</span><br><span class="line">        if(string.equals(&quot;#&quot;)==false)</span><br><span class="line">        linklist.add(string);</span><br><span class="line">        &#125;while(string.equals(&quot;#&quot;)==false);</span><br><span class="line">        Collections.sort(linklist);</span><br><span class="line">    for(String s:linklist) &#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题描述】对分行输入的若干字符串按字典序（由小到大）进行排序并输出。&lt;br&gt;【输入形式】控制台输入多行字符串，各个字符串可能含有空格，以#结束&lt;br&gt;【输出形式】输出按字典序（由小到大）进行排序后的字符串。&lt;br&gt;【样例输入】&lt;br&gt;zwtr&lt;br&gt;fhoenf&lt;br&gt;he
      
    
    </summary>
    
    
      <category term="java" scheme="https://lkdnjhhb.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>图片检索</title>
    <link href="https://lkdnjhhb.github.io/2018/12/01/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    <id>https://lkdnjhhb.github.io/2018/12/01/图像识别/</id>
    <published>2018-12-01T15:08:35.000Z</published>
    <updated>2018-12-02T12:42:30.032Z</updated>
    
    <content type="html"><![CDATA[<p>今天在阮一峰的博客上看到了这篇《相似图片搜索原理》博客，于是就有了研究一下指纹识别和图像识别的想法。本篇博客大部分内容引用了它博客的内容。<br>根据Neal Krawetz博士的解释，实现相似图片搜素的关键技术叫做”感知哈希算法”（Perceptualhash algorithm），它的作用是对每张图片生成一个”指纹”（fingerprint）字符串，然后比较不同图片的指纹。结果越接近，就说明图片越相似。</p><p>以下是一个最简单的Java实现：</p><p>预处理：读取图片</p><p>第一步，缩小尺寸。</p><p>将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。</p><p>第二步，简化色彩。</p><p>将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。</p><p>第三步，计算平均值。</p><p>计算所有64个像素的灰度平均值。</p><p>第四步，比较像素的灰度。</p><p>将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。</p><p>第五步，计算哈希值。</p><p>将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。</p><p>得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。在理论上，这等同于计算”汉明距离”（Hammingdistance）。如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</p><p>你可以将几张图片放在一起，也计算出他们的汉明距离对比，就可以看看两张图片是否相似。</p><p>这种算法的优点是简单快速，不受图片大小缩放的影响，缺点是图片的内容不能变更。如果在图片上加几个文字，它就认不出来了。所以，它的最佳用途是根据缩略图，找出原图。</p><p>实际应用中，往往采用更强大的pHash算法和SIFT算法，它们能够识别图片的变形。只要变形程度不超过25%，它们就能匹配原图。这些算法虽然更复杂，但是原理与上面的简便算法是一样的，就是先将图片转化成Hash字符串，然后再进行比较。</p><p>以上内容大部分直接从阮一峰的网站上复制过来，想看原著的童鞋可以去在最上面的链接点击进去看。<br>以下为阿里的开源实现，在实验此代码的情况下，大家要先先在工程中导下jdk 中的rt.jar 包,此外也有专门的jar包来实现图片预处理，有兴趣的可自行去百度，小编今天也是初次研究，其中也有很多不懂，希望大家共同学习。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line">package com.ldy.ly002;</span><br><span class="line"></span><br><span class="line">import java.awt.AlphaComposite;</span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Font;</span><br><span class="line">import java.awt.Graphics2D;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.RenderingHints;</span><br><span class="line">import java.awt.geom.AffineTransform;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.awt.image.ColorModel;</span><br><span class="line">import java.awt.image.WritableRaster;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line">import com.sun.image.codec.jpeg.ImageFormatException;</span><br><span class="line">import com.sun.image.codec.jpeg.JPEGCodec;</span><br><span class="line">import com.sun.image.codec.jpeg.JPEGImageDecoder;</span><br><span class="line">import com.sun.image.codec.jpeg.JPEGImageEncoder;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 图片工具类，主要针对图片水印处理</span><br><span class="line"> * </span><br><span class="line"> * @author 025079</span><br><span class="line"> * @version [版本号, 2011-11-28]</span><br><span class="line"> * @see [相关类/方法]</span><br><span class="line"> * @since [产品/模块版本]</span><br><span class="line"> */</span><br><span class="line">public class ImageHelper &#123;</span><br><span class="line"></span><br><span class="line"> // 项目根目录路径</span><br><span class="line"> public static final String path = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * 生成缩略图 &lt;br/&gt;</span><br><span class="line"> * 保存:ImageIO.write(BufferedImage, imgType[jpg/png/...], File);</span><br><span class="line"> * </span><br><span class="line"> * @param source</span><br><span class="line"> *      原图片</span><br><span class="line"> * @param width</span><br><span class="line"> *      缩略图宽</span><br><span class="line"> * @param height</span><br><span class="line"> *      缩略图高</span><br><span class="line"> * @param b</span><br><span class="line"> *      是否等比缩放</span><br><span class="line"> * */</span><br><span class="line"> public static BufferedImage thumb(BufferedImage source, int width,</span><br><span class="line">  int height, boolean b) &#123;</span><br><span class="line"> // targetW，targetH分别表示目标长和宽</span><br><span class="line"> int type = source.getType();</span><br><span class="line"> BufferedImage target = null;</span><br><span class="line"> double sx = (double) width / source.getWidth();</span><br><span class="line"> double sy = (double) height / source.getHeight();</span><br><span class="line"></span><br><span class="line"> if (b) &#123;</span><br><span class="line">  if (sx &gt; sy) &#123;</span><br><span class="line">  sx = sy;</span><br><span class="line">  width = (int) (sx * source.getWidth());</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">  sy = sx;</span><br><span class="line">  height = (int) (sy * source.getHeight());</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> if (type == BufferedImage.TYPE_CUSTOM) &#123; // handmade</span><br><span class="line">  ColorModel cm = source.getColorModel();</span><br><span class="line">  WritableRaster raster = cm.createCompatibleWritableRaster(width,</span><br><span class="line">   height);</span><br><span class="line">  boolean alphaPremultiplied = cm.isAlphaPremultiplied();</span><br><span class="line">  target = new BufferedImage(cm, raster, alphaPremultiplied, null);</span><br><span class="line"> &#125; else</span><br><span class="line">  target = new BufferedImage(width, height, type);</span><br><span class="line"> Graphics2D g = target.createGraphics();</span><br><span class="line"> // smoother than exlax:</span><br><span class="line"> g.setRenderingHint(RenderingHints.KEY_RENDERING,</span><br><span class="line">  RenderingHints.VALUE_RENDER_QUALITY);</span><br><span class="line"> g.drawRenderedImage(source, AffineTransform.getScaleInstance(sx, sy));</span><br><span class="line"> g.dispose();</span><br><span class="line"> return target;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * 图片水印</span><br><span class="line"> * </span><br><span class="line"> * @param imgPath</span><br><span class="line"> *      待处理图片</span><br><span class="line"> * @param markPath</span><br><span class="line"> *      水印图片</span><br><span class="line"> * @param x</span><br><span class="line"> *      水印位于图片左上角的 x 坐标值</span><br><span class="line"> * @param y</span><br><span class="line"> *      水印位于图片左上角的 y 坐标值</span><br><span class="line"> * @param alpha</span><br><span class="line"> *      水印透明度 0.1f ~ 1.0f</span><br><span class="line"> * */</span><br><span class="line"> public static void waterMark(String imgPath, String markPath, int x, int y,</span><br><span class="line">  float alpha) &#123;</span><br><span class="line"> try &#123;</span><br><span class="line">  // 加载待处理图片文件</span><br><span class="line">  Image img = ImageIO.read(new File(imgPath));</span><br><span class="line"></span><br><span class="line">  BufferedImage image = new BufferedImage(img.getWidth(null),</span><br><span class="line">   img.getHeight(null), BufferedImage.TYPE_INT_RGB);</span><br><span class="line">  Graphics2D g = image.createGraphics();</span><br><span class="line">  g.drawImage(img, 0, 0, null);</span><br><span class="line"></span><br><span class="line">  // 加载水印图片文件</span><br><span class="line">  Image src_biao = ImageIO.read(new File(markPath));</span><br><span class="line">  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class="line">   alpha));</span><br><span class="line">  g.drawImage(src_biao, x, y, null);</span><br><span class="line">  g.dispose();</span><br><span class="line"></span><br><span class="line">  // 保存处理后的文件</span><br><span class="line">  FileOutputStream out = new FileOutputStream(imgPath);</span><br><span class="line">  JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);</span><br><span class="line">  encoder.encode(image);</span><br><span class="line">  out.close();</span><br><span class="line"> &#125; catch (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> /**</span><br><span class="line"> * 文字水印</span><br><span class="line"> * </span><br><span class="line"> * @param imgPath</span><br><span class="line"> *      待处理图片</span><br><span class="line"> * @param text</span><br><span class="line"> *      水印文字</span><br><span class="line"> * @param font</span><br><span class="line"> *      水印字体信息</span><br><span class="line"> * @param color</span><br><span class="line"> *      水印字体颜色</span><br><span class="line"> * @param x</span><br><span class="line"> *      水印位于图片左上角的 x 坐标值</span><br><span class="line"> * @param y</span><br><span class="line"> *      水印位于图片左上角的 y 坐标值</span><br><span class="line"> * @param alpha</span><br><span class="line"> *      水印透明度 0.1f ~ 1.0f</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"> public static void textMark(String imgPath, String text, Font font,</span><br><span class="line">  Color color, int x, int y, float alpha) &#123;</span><br><span class="line"> try &#123;</span><br><span class="line">  Font Dfont = (font == null) ? new Font(&quot;宋体&quot;, 20, 13) : font;</span><br><span class="line"></span><br><span class="line">  Image img = ImageIO.read(new File(imgPath));</span><br><span class="line"></span><br><span class="line">  BufferedImage image = new BufferedImage(img.getWidth(null),</span><br><span class="line">   img.getHeight(null), BufferedImage.TYPE_INT_RGB);</span><br><span class="line">  Graphics2D g = image.createGraphics();</span><br><span class="line"></span><br><span class="line">  g.drawImage(img, 0, 0, null);</span><br><span class="line">  g.setColor(color);</span><br><span class="line">  g.setFont(Dfont);</span><br><span class="line">  g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class="line">   alpha));</span><br><span class="line">  g.drawString(text, x, y);</span><br><span class="line">  g.dispose();</span><br><span class="line">  FileOutputStream out = new FileOutputStream(imgPath);</span><br><span class="line">  JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);</span><br><span class="line">  encoder.encode(image);</span><br><span class="line">  out.close();</span><br><span class="line"> &#125; catch (Exception e) &#123;</span><br><span class="line">  System.out.println(e);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * 读取JPEG图片</span><br><span class="line"> * @param filename 文件名</span><br><span class="line"> * @return BufferedImage 图片对象</span><br><span class="line"> */</span><br><span class="line"> public static BufferedImage readJPEGImage(String filename)</span><br><span class="line"> &#123;</span><br><span class="line"> try &#123;</span><br><span class="line">  InputStream imageIn = new FileInputStream(new File(filename));</span><br><span class="line">  // 得到输入的编码器，将文件流进行jpg格式编码</span><br><span class="line">  JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(imageIn);</span><br><span class="line">  // 得到编码后的图片对象</span><br><span class="line">  BufferedImage sourceImage = decoder.decodeAsBufferedImage();</span><br><span class="line">  </span><br><span class="line">  return sourceImage;</span><br><span class="line"> &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (ImageFormatException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> return null;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * 读取JPEG图片</span><br><span class="line"> * @param filename 文件名</span><br><span class="line"> * @return BufferedImage 图片对象</span><br><span class="line"> */</span><br><span class="line"> public static BufferedImage readPNGImage(String filename)</span><br><span class="line"> &#123;</span><br><span class="line"> try &#123;</span><br><span class="line">  File inputFile = new File(filename); </span><br><span class="line">     BufferedImage sourceImage = ImageIO.read(inputFile);</span><br><span class="line">  return sourceImage;</span><br><span class="line"> &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (ImageFormatException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> return null;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * 灰度值计算</span><br><span class="line"> * @param pixels 像素</span><br><span class="line"> * @return int 灰度值</span><br><span class="line"> */</span><br><span class="line"> public static int rgbToGray(int pixels) &#123;</span><br><span class="line"> // int _alpha = (pixels &gt;&gt; 24) &amp; 0xFF;</span><br><span class="line"> int _red = (pixels &gt;&gt; 16) &amp; 0xFF;</span><br><span class="line"> int _green = (pixels &gt;&gt; 8) &amp; 0xFF;</span><br><span class="line"> int _blue = (pixels) &amp; 0xFF;</span><br><span class="line"> return (int) (0.3 * _red + 0.59 * _green + 0.11 * _blue);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line"> * 计算数组的平均值</span><br><span class="line"> * @param pixels 数组</span><br><span class="line"> * @return int 平均值</span><br><span class="line"> */</span><br><span class="line"> public static int average(int[] pixels) &#123;</span><br><span class="line"> float m = 0;</span><br><span class="line"> for (int i = 0; i &lt; pixels.length; ++i) &#123;</span><br><span class="line">  m += pixels[i];</span><br><span class="line"> &#125;</span><br><span class="line"> m = m / pixels.length;</span><br><span class="line"> return (int) m;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line">package com.ldy.ly002;</span><br><span class="line"></span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class SimilarImageSearch &#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @param args</span><br><span class="line">   */</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;String&gt; hashCodes = new ArrayList&lt;String&gt;();</span><br><span class="line">    </span><br><span class="line">    String filename = ImageHelper.path + &quot;\\images\\&quot;;</span><br><span class="line">    String hashCode = null;</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      </span><br><span class="line">      hashCode = produceFingerPrint(filename + &quot;example&quot; + (i + 1) + &quot;.jpg&quot;);</span><br><span class="line">      hashCodes.add(hashCode);</span><br><span class="line">    &#125;    </span><br><span class="line">    System.out.println(&quot;Resources: &quot;);</span><br><span class="line">    System.out.println(hashCodes);</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    String sourceHashCode = produceFingerPrint(filename + &quot;source1.jpg&quot;);</span><br><span class="line">    System.out.println(&quot;Source: &quot;);</span><br><span class="line">    System.out.println(sourceHashCode);</span><br><span class="line">    System.out.println();</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; hashCodes.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">      int difference = hammingDistance(sourceHashCode, hashCodes.get(i));</span><br><span class="line">      System.out.print(&quot;汉明距离:&quot;+difference+&quot;   &quot;);</span><br><span class="line">      if(difference==0)&#123;</span><br><span class="line">        System.out.println(&quot;source.jpg图片跟example&quot;+(i+1)+&quot;.jpg一样&quot;);</span><br><span class="line">      &#125;else if(difference&lt;=5)&#123;</span><br><span class="line">        System.out.println(&quot;source.jpg图片跟example&quot;+(i+1)+&quot;.jpg非常相似&quot;);</span><br><span class="line">      &#125;else if(difference&lt;=10)&#123;</span><br><span class="line">        System.out.println(&quot;source.jpg图片跟example&quot;+(i+1)+&quot;.jpg有点相似&quot;);</span><br><span class="line">      &#125;else if(difference&gt;10)&#123;</span><br><span class="line">        System.out.println(&quot;source.jpg图片跟example&quot;+(i+1)+&quot;.jpg完全不一样&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 计算&quot;汉明距离&quot;（Hamming distance）。</span><br><span class="line">   * 如果不相同的数据位不超过5，就说明两张图片很相似；如果大于10，就说明这是两张不同的图片。</span><br><span class="line">   * @param sourceHashCode 源hashCode</span><br><span class="line">   * @param hashCode 与之比较的hashCode</span><br><span class="line">   */</span><br><span class="line">  public static int hammingDistance(String sourceHashCode, String hashCode) &#123;</span><br><span class="line">    int difference = 0;</span><br><span class="line">    int len = sourceHashCode.length();</span><br><span class="line">    </span><br><span class="line">    for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">      if (sourceHashCode.charAt(i) != hashCode.charAt(i)) &#123;</span><br><span class="line">        difference ++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return difference;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 生成图片指纹</span><br><span class="line">   * @param filename 文件名</span><br><span class="line">   * @return 图片指纹</span><br><span class="line">   */</span><br><span class="line">  public static String produceFingerPrint(String filename) &#123;</span><br><span class="line">    BufferedImage source = ImageHelper.readPNGImage(filename);// 读取文件</span><br><span class="line"></span><br><span class="line">    int width = 8;</span><br><span class="line">    int height = 8;</span><br><span class="line">    </span><br><span class="line">    // 第一步，缩小尺寸。</span><br><span class="line">    // 将图片缩小到8x8的尺寸，总共64个像素。这一步的作用是去除图片的细节，只保留结构、明暗等基本信息，摒弃不同尺寸、比例带来的图片差异。</span><br><span class="line">    BufferedImage thumb = ImageHelper.thumb(source, width, height, false);</span><br><span class="line">    </span><br><span class="line">    // 第二步，简化色彩。</span><br><span class="line">    // 将缩小后的图片，转为64级灰度。也就是说，所有像素点总共只有64种颜色。</span><br><span class="line">    int[] pixels = new int[width * height];</span><br><span class="line">    for (int i = 0; i &lt; width; i++) &#123;</span><br><span class="line">      for (int j = 0; j &lt; height; j++) &#123;</span><br><span class="line">        pixels[i * height + j] = ImageHelper.rgbToGray(thumb.getRGB(i, j));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 第三步，计算平均值。</span><br><span class="line">    // 计算所有64个像素的灰度平均值。</span><br><span class="line">    int avgPixel = ImageHelper.average(pixels);</span><br><span class="line">    </span><br><span class="line">    // 第四步，比较像素的灰度。</span><br><span class="line">    // 将每个像素的灰度，与平均值进行比较。大于或等于平均值，记为1；小于平均值，记为0。</span><br><span class="line">    int[] comps = new int[width * height];</span><br><span class="line">    for (int i = 0; i &lt; comps.length; i++) &#123;</span><br><span class="line">      if (pixels[i] &gt;= avgPixel) &#123;</span><br><span class="line">        comps[i] = 1;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        comps[i] = 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 第五步，计算哈希值。</span><br><span class="line">    // 将上一步的比较结果，组合在一起，就构成了一个64位的整数，这就是这张图片的指纹。组合的次序并不重要，只要保证所有图片都采用同样次序就行了。</span><br><span class="line">    StringBuffer hashCode = new StringBuffer();</span><br><span class="line">    for (int i = 0; i &lt; comps.length; i+= 4) &#123;</span><br><span class="line">      int result = comps[i] * (int) Math.pow(2, 3) + comps[i + 1] * (int) Math.pow(2, 2) + comps[i + 2] * (int) Math.pow(2, 1) + comps[i + 2];</span><br><span class="line">      hashCode.append(binaryToHex(result));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 得到指纹以后，就可以对比不同的图片，看看64位中有多少位是不一样的。</span><br><span class="line">    return hashCode.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 二进制转为十六进制</span><br><span class="line">   * @param int binary</span><br><span class="line">   * @return char hex</span><br><span class="line">   */</span><br><span class="line">  private static char binaryToHex(int binary) &#123;</span><br><span class="line">    char ch = &apos; &apos;;</span><br><span class="line">    switch (binary)</span><br><span class="line">    &#123;</span><br><span class="line">    case 0:</span><br><span class="line">      ch = &apos;0&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 1:</span><br><span class="line">      ch = &apos;1&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 2:</span><br><span class="line">      ch = &apos;2&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 3:</span><br><span class="line">      ch = &apos;3&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 4:</span><br><span class="line">      ch = &apos;4&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 5:</span><br><span class="line">      ch = &apos;5&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 6:</span><br><span class="line">      ch = &apos;6&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 7:</span><br><span class="line">      ch = &apos;7&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 8:</span><br><span class="line">      ch = &apos;8&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 9:</span><br><span class="line">      ch = &apos;9&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 10:</span><br><span class="line">      ch = &apos;a&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 11:</span><br><span class="line">      ch = &apos;b&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 12:</span><br><span class="line">      ch = &apos;c&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 13:</span><br><span class="line">      ch = &apos;d&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 14:</span><br><span class="line">      ch = &apos;e&apos;;</span><br><span class="line">      break;</span><br><span class="line">    case 15:</span><br><span class="line">      ch = &apos;f&apos;;</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      ch = &apos; &apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    return ch;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code class="[原著博客地址](http://download.csdn.net/detail/yjflinchong/4239243)"></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在阮一峰的博客上看到了这篇《相似图片搜索原理》博客，于是就有了研究一下指纹识别和图像识别的想法。本篇博客大部分内容引用了它博客的内容。&lt;br&gt;根据Neal Krawetz博士的解释，实现相似图片搜素的关键技术叫做”感知哈希算法”（Perceptualhash algor
      
    
    </summary>
    
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://lkdnjhhb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二分算法实例2</title>
    <link href="https://lkdnjhhb.github.io/2018/12/01/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B2/"/>
    <id>https://lkdnjhhb.github.io/2018/12/01/二分算法实例2/</id>
    <published>2018-12-01T15:01:35.000Z</published>
    <updated>2018-12-01T15:15:43.937Z</updated>
    
    <content type="html"><![CDATA[<p>FindNumber<br>描述</p><p>现在，给定等式8x ^ 4 + 7x ^ 3 + 2x ^ 2 + 3x + 6 == Y，你能找到0到100之间的解; 现在请试试你的幸运儿。</p><p>输入</p><p>输入输入的第一行包含整数T（1 &lt;= T &lt;= 100），表示测试用例的数量。然后是T行，每行有一个实数Y（fabs（Y）&lt;= 1e10）;</p><p>输出</p><p>输出对于每个测试用例，如果没有0到100之间的等式解，那么你应该只输出一个实数（精确到4位小数），这是方程的解，或“无解！”。</p><p>输入样例 1 </p><p>2<br>100<br>-4<br>输出样例 1</p><p>1.<br>没解决方案！</p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static double check(double x) &#123;</span><br><span class="line">    return(8*x*x*x+7*x*x*x+2*x*x+3*x+6);</span><br><span class="line">    &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">        Scanner scanner=new Scanner(System.in);</span><br><span class="line">int n;</span><br><span class="line">n=scanner.nextInt();</span><br><span class="line">double[] a=new double[n];</span><br><span class="line">for(int i=0;i&lt;n;i++) &#123;</span><br><span class="line">a[i]=scanner.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;a.length;i++) &#123;</span><br><span class="line">double h=100.0;double low=0.0; double mid=0;</span><br><span class="line">while((low-h)&lt;(1.0e-6)) &#123;</span><br><span class="line">mid=(h+low)/2;</span><br><span class="line">    double x=check(mid);</span><br><span class="line">if(x==a[i]) &#123;</span><br><span class="line">System.out.printf(&quot;%.4f&quot;, mid);</span><br><span class="line">    System.out.println();</span><br><span class="line">    break;</span><br><span class="line">&#125;else if(x&gt;a[i]) h=mid;</span><br><span class="line"> else if(x&lt;a[i]) low=mid;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;No solution!&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FindNumber&lt;br&gt;描述&lt;/p&gt;
&lt;p&gt;现在，给定等式8x ^ 4 + 7x ^ 3 + 2x ^ 2 + 3x + 6 == Y，你能找到0到100之间的解; 现在请试试你的幸运儿。&lt;/p&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;输入输入的第一行包含整数T（1 &amp;lt;= T
      
    
    </summary>
    
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://lkdnjhhb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二分算法</title>
    <link href="https://lkdnjhhb.github.io/2018/12/01/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95/"/>
    <id>https://lkdnjhhb.github.io/2018/12/01/二分算法/</id>
    <published>2018-12-01T14:08:35.000Z</published>
    <updated>2018-12-01T14:36:57.283Z</updated>
    
    <content type="html"><![CDATA[<p>1、定义<br>    二分查找又称折半查找，它是一种效率较高的查找方法。</p><pre><code>二分查找要求：线性表是有序表，即表中结点按关键字有序，并且要用向量作为表的存储结构。不妨设有序表是递增有序的。</code></pre><p>2、基本思想<br>    二分查找的基本思想是：</p><pre><code>设R[low..high]是当前的查找区间</code></pre><p> （1）首先确定该区间的中点位置：</p><p> （2）然后将待查的K值与R[mid].key比较：若相等，则查找成功并返回此位置，否则须确定新的查找区间，继续二分查找，具体方法如下：</p><pre><code>①  若R[mid].key&gt;K，则由表的有序性可知R[mid..n].keys均大于K，因此若表中存在关键字等于K的结点，则该结点必定是在位置mid左边的子表R[1..mid-1]中，故新的查找区间是左子表R[1..mid-1]。②  若R[mid].key&lt;K，则要查找的K必在mid的右子表R[mid+1..n]中，即新的查找区间是右子表R[mid+1..n]。下一次查找是针对新的查找区间进行的。因此，从初始的查找区间R[1..n]开始，每经过一次与当前查找区间的中点位置上的结点关键字的比较，就可确定查找是否成功，不成功则当前的查找区间就缩小一半。这一过程重复直至找到关键字为K的结点，或者直至当前的查找区间为空(即查找失败)时为止。</code></pre><p>3、存储结构<br>    二分查找只适用顺序存储结构。`<br>4.伪代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分查找，找到该值在数组中的下标，否则为-1</span><br><span class="line"> */</span><br><span class="line">static int binarySerach(int[] array, int key) &#123;</span><br><span class="line">    int low = 0;</span><br><span class="line">    int high = array.length - 1;</span><br><span class="line"></span><br><span class="line">    // 这里必须是 &lt;=</span><br><span class="line">    while (low &lt;= high) &#123;</span><br><span class="line">        int mid = (low + high) / 2;</span><br><span class="line">        if (array[mid] == key) &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (array[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            height = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int binarySerach(int[] arr, int key,int low,int high) &#123;</span><br><span class="line">//求中间元素的下标</span><br><span class="line">int mid = (low + high) / 2;</span><br><span class="line">//数组内不含有指定元素，依据下标的规则，退出</span><br><span class="line">if (low &gt; high)</span><br><span class="line">return -1;</span><br><span class="line">//查找到指定元素</span><br><span class="line">if (key == arr[mid]) &#123;</span><br><span class="line">return mid;</span><br><span class="line">//当查找的元素大于中间下标的元素，则改变开始下标的位置</span><br><span class="line">&#125; else if (key &gt; arr[mid]) &#123;</span><br><span class="line">return getKey(arr, key, mid + 1, high);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">//当查找的元素小于中间下标的元素，则改变结束下标的位置</span><br><span class="line">return getKey(arr, key, low, mid - 1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、定义&lt;br&gt;    二分查找又称折半查找，它是一种效率较高的查找方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二分查找要求：线性表是有序表，即表中结点按关键字有序，并且要用向量作为表的存储结构。不妨设有序表是递增有序的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2、基本思想&lt;br&gt;  
      
    
    </summary>
    
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://lkdnjhhb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>二分算法实例</title>
    <link href="https://lkdnjhhb.github.io/2018/12/01/%E4%BA%8C%E5%88%86%E7%AE%97%E6%B3%95%E5%AE%9E%E4%BE%8B1/"/>
    <id>https://lkdnjhhb.github.io/2018/12/01/二分算法实例1/</id>
    <published>2018-12-01T14:08:35.000Z</published>
    <updated>2018-12-01T15:08:54.330Z</updated>
    
    <content type="html"><![CDATA[<p>分巧克力<br>描述</p><p>儿童节那天有K位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。 小明一共有N块巧克力，其中第i块是Hi x Wi的方格组成的长方形。</p><p>为了公平起见，小明需要从这 N 块巧克力中切出K块巧克力分给小朋友们。切出的巧克力需要满足：</p><ol><li>形状是正方形，边长是整数  </li><li>大小相同<br>例如一块6x5的巧克力可以切出6块2x2的巧克力或者2块3x3的巧克力。</li></ol><p>当然小朋友们都希望得到的巧克力尽可能大，你能帮小Hi计算出最大的边长是多少么？</p><p>输入</p><p>输入第一行包含两个整数N和K。(1 &lt;= N, K &lt;= 100000)<br>以下N行每行包含两个整数Hi和Wi。(1 &lt;= Hi, Wi &lt;= 100000) 输入保证每位小朋友至少能获得一块1x1的巧克力。</p><p>输出</p><p>输出输出切出的正方形巧克力最大可能的边长。</p><p>输入样例 1 </p><p>2 10<br>6 5<br>5 6<br>输出样例 1</p><p>2</p><p>实现代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    static boolean check(int mid,Qkl[] qkl,int m) &#123;</span><br><span class="line">    //求分出的块的数量</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for(int i = 0; i &lt;qkl.length ; i++)&#123;</span><br><span class="line">    sum += (qkl[i].hi / mid ) * (qkl[i].wi / mid);</span><br><span class="line">    &#125;</span><br><span class="line">    return sum &gt;= m;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    Scanner scanner=new Scanner(System.in);</span><br><span class="line">int n;//n块巧克里</span><br><span class="line">int m;//m块</span><br><span class="line">n=scanner.nextInt();</span><br><span class="line">m=scanner.nextInt();</span><br><span class="line">Qkl[] qkl=new Qkl[n];</span><br><span class="line">        for(int i=0;i&lt;qkl.length;i++) &#123;</span><br><span class="line">        Qkl q=new Qkl();</span><br><span class="line">        q.hi=scanner.nextInt();</span><br><span class="line">        q.wi=scanner.nextInt();</span><br><span class="line">        qkl[i]=q;</span><br><span class="line">        &#125;</span><br><span class="line">        //要求是求最大边长,最通用的就是一个一个枚举求出最大边长因速度慢所以采用二分举例求最大边长</span><br><span class="line">        int l=1;</span><br><span class="line">        int r=10000;</span><br><span class="line">        int mid;</span><br><span class="line">         //二分寻找边长要求边长最大所以循环全部进行</span><br><span class="line">        while(l &lt; r)&#123;</span><br><span class="line">    mid = (l+r+1)/2;</span><br><span class="line">    if(check(mid,qkl,m))</span><br><span class="line">    l = mid;</span><br><span class="line">    else</span><br><span class="line">    r = mid - 1;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">        System.out.println(l);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Qkl&#123;</span><br><span class="line">int hi;</span><br><span class="line">int wi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分巧克力&lt;br&gt;描述&lt;/p&gt;
&lt;p&gt;儿童节那天有K位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。 小明一共有N块巧克力，其中第i块是Hi x Wi的方格组成的长方形。&lt;/p&gt;
&lt;p&gt;为了公平起见，小明需要从这 N 块巧克力中切出K块巧克力分给小朋友们。切出的巧克
      
    
    </summary>
    
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Java" scheme="https://lkdnjhhb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>图的完整操作</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/%E5%9B%BE%E7%9A%84%E5%AE%8C%E6%95%B4%E6%93%8D%E4%BD%9C/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/图的完整操作/</id>
    <published>2018-11-30T07:05:36.000Z</published>
    <updated>2018-11-30T07:07:23.492Z</updated>
    
    <content type="html"><![CDATA[<p>#include”MGraph.h”<br>//———-构造图的邻接矩阵——————-<br>template<class vertextype,="" class="" arctype=""><br>MGraph&lt;VertexType, ArcType&gt;::MGraph(int n, int e) {<br>    vertexNum = n;<br>    arcNum = e;<br>    //开辟顶点集合边集<br>    vertex = new VertexType[vertexNum];<br>    arc = new ArcType*[vertexNum];<br>    visit = new int[vertexNum];<br>    for (int i = 0; i &lt; vertexNum; i++)<br>        arc[i] = new ArcType[vertexNum];<br>    for (int i = 0; i &lt; vertexNum; i++)<br>        for (int j = 0; j &lt; vertexNum; j++)<br>            arc[i][j] = MaxInt;<br>    //顶点、边集、标记数值赋值<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        VertexType elem;<br>        cin &gt;&gt; elem;<br>        vertex[i] = elem;<br>    }<br>    for (int k = 0; k &lt; arcNum; k++) {<br>        VertexType v1, v2;<br>        ArcType weight;<br>        cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; weight;<br>        int i = LocateVex(v1);<br>        int j = LocateVex(v2);<br>        arc[i][j] = weight;<br>        arc[j][i] = weight;<br>    }<br>    for (int i = 0; i &lt; vertexNum; i++) visit[i] = 0;<br>}<br>//———-析构——————-<br>template<class vertextype,="" class="" arctype=""><br>MGraph&lt;VertexType, ArcType&gt;::~MGraph() {<br>    vertex = NULL;<br>    delete vertex;<br>    arc = NULL;<br>    delete[]arc;<br>}<br>//———-查找某顶点对应的存储序号——————-<br>template<class vertextype,="" class="" arctype=""><br>int MGraph&lt;VertexType, ArcType&gt;::LocateVex(VertexType elem) {<br>    for (int i = 0; i &lt; vertexNum; i++)<br>        if (vertex[i] == elem) return i;<br>    return -1;<br>}</class></class></class></p><p>//———-若存储有向图，输出出度为零的顶底个数——————-<br>template<class vertextype,="" class="" arctype=""><br>int MGraph&lt;VertexType, ArcType&gt;::CountOD() {<br>    int count = 0;<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        for (int j = 0; j &lt; vertexNum; j++) {<br>            if (arc[i][j] != MaxInt) {<br>                count = count + 1;<br>                break;<br>            }<br>        }<br>    }</class></p><pre><code>count = vertexNum - count;return count;</code></pre><p>}<br>//打印图<br>template<class vertextype,="" class="" arctype=""><br>void MGraph&lt;VertexType, ArcType&gt;::DisplayGraph() {<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        for (int j = 0; j &lt; vertexNum; j++) {<br>            if (arc[i][j] != MaxInt)<br>                cout &lt;&lt; arc[i][j] &lt;&lt; “ “;<br>            else<br>                cout &lt;&lt; “∞” &lt;&lt; “ “;<br>        }<br>        cout &lt;&lt; endl;<br>    }<br>}<br>template<class vertextype,="" class="" arctype=""><br>//深度优先遍历<br>void MGraph&lt;VertexType, ArcType&gt;::DFS(VertexType elem) {<br>    cout &lt;&lt; elem;<br>    visit[LocateVex(elem)] = 1;<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        if (arc[LocateVex(elem)][i] != MaxInt&amp;&amp;visit[i] != 1)<br>            DFS(vertex[i]);<br>    }<br>}<br>template<class vertextype,="" class="" arctype=""><br>//广度优先遍历<br>void MGraph&lt;VertexType, ArcType&gt;::BFS(VertexType elem) {<br>    queue<int> que;<br>    cout &lt;&lt; vertex[LocateVex(elem)];<br>    visit[LocateVex(elem)] = 1;<br>    que.push(LocateVex(elem));<br>    while (que.empty()==false) {<br>        int i = que.front();<br>        que.pop();<br>        for (int j = 0; j &lt; vertexNum; j++) {<br>            if (arc[i][j] != MaxInt&amp;&amp;visit[j] != 1) {<br>                cout &lt;&lt; vertex[j];<br>                visit[j] = 1;<br>                que.push(j);<br>            }<br>        }<br>    }<br>}<br>//prim算法<br>template<class vertextype,="" class="" arctype=""><br>void prim(MGraph&lt;VertexType,ArcType&gt; G) {<br>    shortEdge&lt;VertexType, ArcType&gt; *shortedge=new shortEdge&lt;VertexType, ArcType&gt;[G.vertexNum];<br>    for (int i = 0; i &lt; G.vertexNum; i++) {<br>        shortedge[i].lowcost = G.arc[0][i];<br>        shortedge[i].adjvex = G.vertex[0];<br>    }<br>    shortedge[0].lowcost = 0;<br>    for (int i = 1; i &lt; G.vertexNum; i++) {<br>        int k = MinEnge(shortedge, G.vertexNum);<br>        cout &lt;&lt; “(“ &lt;&lt; shortedge[k].adjvex &lt;&lt; G.vertex[k] &lt;&lt; “)” &lt;&lt; shortedge[k].lowcost &lt;&lt; endl;<br>        shortedge[k].lowcost = 0;<br>        for (int j = 1; j &lt; G.vertexNum; j++) {<br>            if (G.arc[k][j] &lt; shortedge[j].lowcost) {<br>                shortedge[j].lowcost = G.arc[k][j];<br>                shortedge[j].adjvex = G.vertex[k];<br>            }<br>        }<br>    }</class></int></class></class></class></p><p>}<br>template<class vertextype,="" class="" arctype=""><br>//查找集合中最短边<br>int  MinEnge(shortEdge&lt;VertexType, ArcType&gt; shortenge[],int vertexNum) {<br>    int k;<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        if (shortenge[i].lowcost != 0) {<br>            k = i;<br>        }<br>    }<br>    for (int i = 0; i &lt; vertexNum; i++) {<br>        if (shortenge[i].lowcost != 0 &amp;&amp; shortenge[i].lowcost &lt; shortenge[k].lowcost)<br>            k = i;<br>    }<br>    return k;<br>};<br>template<class vertextype,="" class="" arctype=""><br>//KrusKal算法<br>void Kruskal(MGraph&lt;VertexType, ArcType&gt; G) {<br>    EdgeType&lt; VertexType, ArcType&gt; <em>edge = new EdgeType&lt; VertexType, ArcType&gt;[G.arcNum</em>2];<br>    //初始化边集数组<br>    int k = 0;<br>    for (int i = 0; i &lt; G.vertexNum; i++) {<br>        for (int j = 0; j &lt; G.vertexNum; j++) {<br>            if (G.arc[i][j] != MaxInt) {<br>                edge[k].from = G.vertex[i];<br>                edge[k].to = G.vertex[j];<br>                edge[k].weight = G.arc[i][j];<br>                k++;<br>            }<br>        }<br>    }<br>    soft(edge, G.arcNum<em>2);<br>    int </em>parent = new int[G.vertexNum];<br>    for (int i = 0; i &lt; G.vertexNum; i++) parent[i] = -1;<br>    for (int num = 0, i = 0; i &lt; G.arcNum<em>2; i++) {<br>        int vex1 = FindRoot(parent, G.LocateVex(edge[i].from));<br>        int  vex2 = FindRoot(parent, G.LocateVex(edge[i].to));<br>        if (vex1 != vex2) {<br>            cout &lt;&lt; “(“ &lt;&lt; edge[i].from &lt;&lt; edge[i].to &lt;&lt; “)” &lt;&lt; edge[i].weight &lt;&lt; endl;<br>            parent[vex2] = vex1;<br>            num++;<br>            if (num == G.vertexNum - 1) return;<br>        }<br>    }<br>}<br>template<class vertextype,="" class="" arctype=""><br>//对边集进行排序的函数<br>void soft(EdgeType&lt; VertexType, ArcType&gt; </class></em>edge, int length) {<br>    for (int i = 0; i &lt; length - 1; i++) {<br>        for (int j = 0; j &lt; length - i - 1; j++) {<br>            if (edge[j].weight &gt; edge[j + 1].weight) {<br>                EdgeType&lt; VertexType, ArcType&gt; e;<br>                e = edge[j];<br>                edge[j] = edge[j + 1];<br>                edge[j + 1] = e;<br>            }<br>        }<br>    }<br>}<br>//寻找根节点<br>static int FindRoot(int parent[], int v) {<br>    int t = v;</class></class></p><pre><code>while(parent[t] &gt; -1) t = parent[t];return t;</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#include”MGraph.h”&lt;br&gt;//———-构造图的邻接矩阵——————-&lt;br&gt;template&lt;class vertextype,=&quot;&quot; class=&quot;&quot; arctype=&quot;&quot;&gt;&lt;br&gt;MGraph&amp;lt;VertexType, ArcType&amp;gt;::M
      
    
    </summary>
    
    
      <category term="c++" scheme="https://lkdnjhhb.github.io/tags/c/"/>
    
      <category term="数据结构" scheme="https://lkdnjhhb.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>在hexo上写博客的模板</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/%E5%9C%A8hexo%E4%B8%8A%E5%86%99%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%A8%A1%E6%9D%BF/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/在hexo上写博客的模板/</id>
    <published>2018-11-30T07:03:28.000Z</published>
    <updated>2018-11-30T07:04:14.208Z</updated>
    
    <content type="html"><![CDATA[<p>title: 最小生成树之prim算法<br>date: 2018-11-30 14:18:09<br>comments: true<br>toc: true #是否显示文章目录<br>categories: “c++/算法” #分类<br>tags:   #标签</p><pre><code>- 模板</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 最小生成树之prim算法&lt;br&gt;date: 2018-11-30 14:18:09&lt;br&gt;comments: true&lt;br&gt;toc: true #是否显示文章目录&lt;br&gt;categories: “c++/算法” #分类&lt;br&gt;tags:   #标签&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何用github+hexo搭建个人博客</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/%E5%A6%82%E4%BD%95%E7%94%A8github-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/如何用github-hexo搭建个人博客/</id>
    <published>2018-11-30T06:59:31.000Z</published>
    <updated>2018-11-30T07:02:05.804Z</updated>
    
    <content type="html"><![CDATA[<p>找了很多教程，发现都不太全，所以写个最新版本的Github+hexo搭建属于自己的博客，第一次写，勿喷！！！</p><p>搭建环境准备：</p><p>1.下载Node.js安装文件（现在电脑基本都是64位的，我就放64位的下载地址）：<a href="https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi" target="_blank" rel="noopener">https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi</a></p><p>或者自行到官网下载最新版本： <a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p>2.安装Git： Git下载包（64位）   Git下载包（32位） </p><p>教程</p><p>下载完成后（全部按NEXT就好），按下WIN+R，调出运行窗口，打cmd，会出现如下图：</p><p>检查node是否安装正确，输入下面两条指令</p><p>node -v<br>npm -v<br>出现如下图就代表安装成功：</p><p>检查Git是否安装正确，输入</p><p>git –version<br>出现如下图就代表安装成功：</p><p>安装成功后，先在Github注册一个账号:<a href="https://github.com/，点右上角的Sign" target="_blank" rel="noopener">https://github.com/，点右上角的Sign</a> up</p><p>输入信息，确认无误后按create：</p><p>第二步直接按继续，然后按右上角的</p><p>如图：</p><p>然后去邮箱那里验证：</p><p>验证完之后就再按一次，会出现这个界面：</p><p>创建成功会出现下图：</p><p>先在某一个盘上创建一个文件夹，例如在E盘建立一个blog文件夹：       </p><p>文件夹右键，点Git Bash ,进入这个界面：</p><p>全局配置设置到淘宝源：</p><p>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>设置全局配置user.name 和user.email</p><p>git config –-global user.name “55kaikainiubi”  //(“”的账号是刚才Github里面自己注册的账号)<br>git config –-global user.email “<a href="mailto:836508484@qq.com" target="_blank" rel="noopener">836508484@qq.com</a>” //(“”的邮箱是你自己注册的邮箱)<br>成功配置：</p><p>生成SSH密钥设置到Github(需先设置user.name和user.email)</p><p>cd ~/.ssh<br>ssh-keygen -t rsa -C “<a href="mailto:836508484@qq.com" target="_blank" rel="noopener">836508484@qq.com</a>” //打自己的邮箱<br>出现下图：</p><p>设置ssh key到GitHub<br>默认生成ssh key在C:\Users\username.ssh文件夹中，复制 id_rsa.pub文件到 github-&gt;settings-&gt;SSH and GPG key-&gt;new ssh key 如图 </p><p>把里面的代码，复制到刚才网站注册的地方：</p><p>ssh设置是否成功测试</p><p>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>安装hexo插件</p><p>输入以下代码：</p><p>  cd / #进入根目录，实际上是git安装的根目录<br>  pwd /<br>npm install hexo-cli -g #安装hexo，阿里云源 大概10s安装</p><p>安装之后，输入以下代码：</p><p>cd /<br>hexo init Hexo<br>cd /Hexo<br>npm instal<br>hexo generate（可简写为hexo g）<br>hexo sever（可简写为hexo s）</p><p>发现到最后已经有网址，复制+粘贴到浏览器访问</p><p>假如4000打不开，换一个端口，输入以下代码：</p><p>hexo s -p 5000<br>本地搭建hexo博客插件完成。</p><p>上传hexo博客的静态文档到GitHub</p><p>查看hexo插件的版本</p><p>hexo -V</p><p>大于hexo 3.0的上传到github的方法： </p><p>安装部署到github插件依赖</p><p>npm install –save hexo-deployer-git</p><p>然后打开我的电脑搜索Hexo文件夹</p><p>deploy:<br>type: git<br>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:55kaikainiubi/55kaikainiubi.github.io.git  //（改成自己的用户名和用户名加域名）<br>branch: master</p><p>再将gitbash部署hexo到github</p><p>hexo deploy<br>看到这样的进程，代表成功部署hexo到github</p><p>等待10分钟左右，打开用户名.github.io,会出现如下界面（代表成功搭建博客）：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;找了很多教程，发现都不太全，所以写个最新版本的Github+hexo搭建属于自己的博客，第一次写，勿喷！！！&lt;/p&gt;
&lt;p&gt;搭建环境准备：&lt;/p&gt;
&lt;p&gt;1.下载Node.js安装文件（现在电脑基本都是64位的，我就放64位的下载地址）：&lt;a href=&quot;https://n
      
    
    </summary>
    
    
      <category term="分享" scheme="https://lkdnjhhb.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>java常用类库</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/java常用类库/</id>
    <published>2018-11-30T06:56:06.000Z</published>
    <updated>2018-11-30T06:57:16.478Z</updated>
    
    <content type="html"><![CDATA[<p>Java 类库概念： Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库</p><p>包名以 Java 开始的包是 Java 核心包 (JavaCore Package) ；</p><p>包名以 Javax 开始的包是 Java 扩展包 (javaExtension Package) ，例如 javax.swing 包；</p><p>Java 类库概念： Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库</p><p>包名以 Java 开始的包是 Java 核心包 (Java Core Package) ；</p><p>包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包；</p><p>常用的 Java 核心包 (Java Core Package)</p><ol><li><p>java.lang      Java 编程语言的基本类库</p></li><li><p>java.applet     创建 applet 需要的所有类</p></li><li><p>java.awt       创建用户界面以及绘制和管理图形、图像的类</p></li><li><p>java.io        通过数据流、对象序列以及文件系统实现的系统输入、输出</p></li><li><p>java.NET       用于实现网络通讯应用的所有类</p></li><li><p>java.util       集合类、时间处理模式、日期时间工具等各类常用工具包</p></li></ol><p>其它还有</p><ol start="7"><li><p>java.sql        访问和处理来自于 Java 标准数据源数据的类</p></li><li><p>java.test       以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口</p></li><li><p>java.security    设计网络安全方案需要的一些类</p></li><li><p>java.beans     开发 Java Beans 需要的所有类</p></li><li><p>java.math      简明的整数算术以及十进制算术的基本函数</p></li><li><p>java.rmi       与远程方法调用相关的所有类</p></li></ol><p>常用的 Java 扩展包 (Java Extension Package)</p><ol><li><p>javax.accessibility  定义了用户界面组件之间相互访问的一种机制</p></li><li><p>javax.naming.*     为命名服务提供了一系列类和接口</p></li><li><p>javax.swing.*       提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包</p></li></ol><p>注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握</p><p>注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。</p><p>重点讲解内容：java.lang和java.util。</p><p>java.lang 包</p><p>这个包称为 java 语言包，是由编译器自动引入的。程序中不必用 import 语句就可以使用。它所包含的类和接口对所有实际的 Java 程序都是必要的。</p><ol><li><p>object 类</p></li><li><p>数学类 (Math)</p></li><li><p>数据类型类</p></li><li><p>线程类</p></li><li><p>字符串类 (String 类和 StringBuffer 类 )</p></li><li><p>系统及运行类 (System 类和 Runtime 类 )</p></li><li><p>错误和异常处理类 (Throwable 、 Exception 、 Error)</p></li><li><p>过程类 (process)</p></li></ol><p>java.util 包</p><ol><li><p>日期类、日历类（ Data 、 Calendar 、 GregorianCalendar ）</p></li><li><p>随机数类（ Random ）</p></li><li><p>位运算类（ BitSet ）</p></li><li><p>矢量类（ Vector ）</p></li><li><p>数据结构类（ Stack ）</p></li><li><p>散列表类（ Hashtable ）</p></li><li><p>StringTokenizer类</p></li></ol><p>包名<br>主要功能<br>java.applet<br>提供了创建applet需要的所有类<br>java.awt.<em><br>提供了创建用户界面以及绘制和管理图形、图像的类<br>java.beans.</em><br>提供了开发Java Beans需要的所有类<br>java.io<br>提供了通过数据流、对象序列以及文件系统实现的系统输入、输出<br>java.lang.<em><br>Java编程语言的基本类库<br>java.math.</em><br>提供了简明的整数算术以及十进制算术的基本函数<br>java.rmi<br>提供了与远程方法调用相关的所有类<br>java.net<br>提供了用于实现网络通讯应用的所有类<br>java.security.<em><br>提供了设计网络安全方案需要的一些类<br>java.sql<br>提供了访问和处理来自于Java标准数据源数据的类<br>java.test<br>包括以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口<br>java.util.</em><br>包括集合类、时间处理模式、日期时间工具等各类常用工具包<br>javax.accessibility<br>定义了用户界面组件之间相互访问的一种机制<br>javax.naming.<em><br>为命名服务提供了一系列类和接口<br>javax.swing.</em><br>提供了一系列轻量级的用户界面组件，是目前Java用户界面常用的包</p><p>常用的 Java 核心包 (Java Core Package)</p><ol><li><p>java.lang      Java 编程语言的基本类库</p></li><li><p>java.applet     创建 applet 需要的所有类</p></li><li><p>java.awt       创建用户界面以及绘制和管理图形、图像的类</p></li><li><p>java.io        通过数据流、对象序列以及文件系统实现的系统输入、输出</p></li><li><p>java.Net       用于实现网络通讯应用的所有类</p></li><li><p>java.util       集合类、时间处理模式、日期时间工具等各类常用工具包</p></li></ol><ol start="7"><li><p>java.sql        访问和处理来自于 Java 标准数据源数据的类</p></li><li><p>java.test       以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口</p></li><li><p>java.security    设计网络安全方案需要的一些类</p></li><li><p>java.beans     开发 Java Beans 需要的所有类</p></li><li><p>java.math      简明的整数算术以及十进制算术的基本函数</p></li><li><p>java.rmi       与远程方法调用相关的所有类</p></li></ol><p>常用的 Java 扩展包 (Java Extension Package)</p><ol><li><p>javax.accessibility  定义了用户界面组件之间相互访问的一种机制</p></li><li><p>javax.naming.*     为命名服务提供了一系列类和接口</p></li><li><p>javax.swing.*       提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包</p></li></ol><p>注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握</p><p>注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。</p><p>重点讲解内容：java.lang和java.util。</p><p>java.lang 包</p><p>这个包称为 java 语言包，是由编译器自动引入的。程序中不必用 import 语句就可以使用。它所包含的类和接口对所有实际的 Java 程序都是必要的。</p><ol><li><p>object 类</p></li><li><p>数学类 (Math)</p></li><li><p>数据类型类</p></li><li><p>线程类</p></li><li><p>字符串类 (String 类和 StringBuffer 类 )</p></li><li><p>系统及运行类 (System 类和 Runtime 类 )</p></li><li><p>错误和异常处理类 (Throwable 、 Exception 、 Error)</p></li><li><p>过程类 (process)</p></li></ol><p>java.util 包</p><ol><li><p>日期类、日历类（ Data 、 Calendar 、 GregorianCalendar ）</p></li><li><p>随机数类（ Random ）</p></li><li><p>位运算类（ BitSet ）</p></li><li><p>矢量类（ Vector ）</p></li><li><p>数据结构类（ Stack ）</p></li><li><p>散列表类（ Hashtable ）</p></li><li><p>StringTokenizer类</p></li></ol><p>Java 类库概念： Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库</p><p>包名以 Java 开始的包是 Java 核心包 (Java Core Package) ；</p><p>包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包；</p><p>Java 类库概念： Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库</p><p>包名以 Java 开始的包是 Java 核心包 (Java Core Package) ；</p><p>包名以 Javax 开始的包是 Java 扩展包 (Java Extension Package) ，例如 javax.swing 包；</p><p>常用的 Java 核心包 (Java Core Package)</p><ol><li><p>java.lang      Java 编程语言的基本类库</p></li><li><p>java.applet     创建 applet 需要的所有类</p></li><li><p>java.awt       创建用户界面以及绘制和管理图形、图像的类</p></li><li><p>java.io        通过数据流、对象序列以及文件系统实现的系统输入、输出</p></li><li><p>java.net       用于实现网络通讯应用的所有类</p></li><li><p>java.util       集合类、时间处理模式、日期时间工具等各类常用工具包</p></li></ol><p>其它还有</p><ol start="7"><li><p>java.sql        访问和处理来自于 Java 标准数据源数据的类</p></li><li><p>java.test       以一种独立于自然语言的方式处理文本、日期、数字和消息的类和接口</p></li><li><p>java.security    设计网络安全方案需要的一些类</p></li><li><p>java.beans     开发 Java Beans 需要的所有类</p></li><li><p>java.math      简明的整数算术以及十进制算术的基本函数</p></li><li><p>java.rmi       与远程方法调用相关的所有类</p></li></ol><p>常用的 Java 扩展包 (Java Extension Package)</p><ol><li><p>javax.accessibility  定义了用户界面组件之间相互访问的一种机制</p></li><li><p>javax.naming.*     为命名服务提供了一系列类和接口</p></li><li><p>javax.swing.*       提供了一系列轻量级的用户界面组件，是目前 Java 用户界面常用的包</p></li></ol><p>注 1 ：最重要且常用的是 1 和 6 ，已用黑体标出的为，需重点掌握</p><p>注 2 ：在使用 Java 时，除了 java.lang 外，其他的包都需要 import 语句引入之后才能使用。</p><p>重点讲解内容：java.lang和java.util。</p><p>java.lang 包</p><p>这个包称为 java 语言包，是由编译器自动引入的。程序中不必用 import 语句就可以使用。它所包含的类和接口对所有实际的 Java 程序都是必要的。</p><ol><li><p>object 类</p></li><li><p>数学类 (Math)</p></li><li><p>数据类型类</p></li><li><p>线程类</p></li><li><p>字符串类 (String 类和 StringBuffer 类 )</p></li><li><p>系统及运行类 (System 类和 Runtime 类 )</p></li><li><p>错误和异常处理类 (Throwable 、 Exception 、 Error)</p></li><li><p>过程类 (process)</p></li></ol><p>java.util 包</p><ol><li><p>日期类、日历类（ Data 、 Calendar 、 GregorianCalendar ）</p></li><li><p>随机数类（ Random ）</p></li><li><p>位运算类（ BitSet ）</p></li><li><p>矢量类（ Vector ）</p></li><li><p>数据结构类（ Stack ）</p></li><li><p>散列表类（ Hashtable ）</p></li><li><p>StringTokenizer类</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java 类库概念： Java 的应用程序接口 (API) 以包的形式来组织，每个包提供了大量的相关类、接口和异常处理类，这些包的集合就是 Java 的类库&lt;/p&gt;
&lt;p&gt;包名以 Java 开始的包是 Java 核心包 (JavaCore Package) ；&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Java" scheme="https://lkdnjhhb.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树之ksuak算法</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E4%B9%8Bksuak%E7%AE%97%E6%B3%95/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/最小生成树之ksuak算法/</id>
    <published>2018-11-30T06:18:09.000Z</published>
    <updated>2018-11-30T06:24:07.863Z</updated>
    
    <content type="html"><![CDATA[<p>学习最小生成树算法之前我们先来了解下 下面这些概念：</p><p>树（Tree）：如果一个无向连通图中不存在回路，则这种图称为树。</p><p>生成树 （Spanning Tree）：无向连通图G的一个子图如果是一颗包含G的所有顶点的树，则该子图称为G的生成树。</p><p>生成树是连通图的极小连通子图。这里所谓极小是指：若在树中任意增加一条边，则将出现一条回路；若去掉一条边，将会使之变成非连通图。</p><p>最小生成树（Minimum Spanning Tree，MST）：或者称为最小代价树Minimum-cost Spanning Tree:对无向连通图的生成树，各边的权值总和称为生成树的权，权最小的生成树称为最小生成树。</p><p>构成生成树的准则有三条：</p><p><1> 必须只使用该网络中的边来构造最小生成树。</1></p><p><2> 必须使用且仅使用n-1条边来连接网络中的n个顶点</2></p><p><3> 不能使用产生回路的边。</3></p><p>构造最小生成树的算法主要有：克鲁斯卡尔（Kruskal）算法和普利姆（Prim）算法他们都遵循以上准则。</p><p>接下分别讨论一下这两种算法以及判定最小生成树是否唯一的方法。</p><p>克鲁斯卡尔算法</p><p>克鲁斯卡尔算法的基本思想是以边为主导地位，始终选择当前可用（所选的边不能构成回路）的最小权植边。所以Kruskal算法的第一步是给所有的边按照从小到大的顺序排序。这一步可以直接使用库函数qsort或者sort。接下来从小到大依次考察每一条边（u，v）。</p><p>具体实现过程如下：</p><p><1>　设一个有n个顶点的连通网络为G（V,E），最初先构造一个只有n个顶点，没有边的非连通图T={V,空}，图中每个顶点自成一格连通分量。</1></p><p><2>　在Ｅ中选择一条具有最小权植的边时，若该边的两个顶点落在不同的连通分量上，则将此边加入到Ｔ中；否则，即这条边的两个顶点落到同一连通分量      上，则将此边舍去（此后永不选用这条边），重新选择一条权植最小的边。</2></p><p><3>　如此重复下去，直到所有顶点在同一连通分量上为止。</3></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">void Kruskal(MGraph&lt;VertexType, ArcType&gt; G) &#123;</span><br><span class="line">EdgeType&lt; VertexType, ArcType&gt; *edge = new EdgeType&lt; VertexType, ArcType&gt;[G.arcNum*2];</span><br><span class="line">//初始化边集数组</span><br><span class="line">int k = 0;</span><br><span class="line">for (int i = 0; i &lt; G.vertexNum; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; G.vertexNum; j++) &#123;</span><br><span class="line">if (G.arc[i][j] != MaxInt) &#123;</span><br><span class="line">edge[k].from = G.vertex[i];</span><br><span class="line">edge[k].to = G.vertex[j];</span><br><span class="line">edge[k].weight = G.arc[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">soft(edge, G.arcNum*2);</span><br><span class="line">int *parent = new int[G.vertexNum];</span><br><span class="line">for (int i = 0; i &lt; G.vertexNum; i++) parent[i] = -1;</span><br><span class="line">for (int num = 0, i = 0; i &lt; G.arcNum*2; i++) &#123;</span><br><span class="line">int vex1 = FindRoot(parent, G.LocateVex(edge[i].from));</span><br><span class="line">int  vex2 = FindRoot(parent, G.LocateVex(edge[i].to));</span><br><span class="line">if (vex1 != vex2) &#123;</span><br><span class="line">cout &lt;&lt; &quot;(&quot; &lt;&lt; edge[i].from &lt;&lt; edge[i].to &lt;&lt; &quot;)&quot; &lt;&lt; edge[i].weight &lt;&lt; endl;</span><br><span class="line">parent[vex2] = vex1;</span><br><span class="line">num++;</span><br><span class="line">if (num == G.vertexNum - 1) return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">template&lt;class VertexType, class ArcType&gt;</span><br><span class="line">//对边集进行排序的函数</span><br><span class="line">void soft(EdgeType&lt; VertexType, ArcType&gt; *edge, int length) &#123;</span><br><span class="line">for (int i = 0; i &lt; length - 1; i++) &#123;</span><br><span class="line">for (int j = 0; j &lt; length - i - 1; j++) &#123;</span><br><span class="line">if (edge[j].weight &gt; edge[j + 1].weight) &#123;</span><br><span class="line">EdgeType&lt; VertexType, ArcType&gt; e;</span><br><span class="line">e = edge[j];</span><br><span class="line">edge[j] = edge[j + 1];</span><br><span class="line">edge[j + 1] = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//寻找根节点</span><br><span class="line">static int FindRoot(int parent[], int v) &#123;</span><br><span class="line">int t = v;</span><br><span class="line"></span><br><span class="line">while(parent[t] &gt; -1) t = parent[t];</span><br><span class="line">return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习最小生成树算法之前我们先来了解下 下面这些概念：&lt;/p&gt;
&lt;p&gt;树（Tree）：如果一个无向连通图中不存在回路，则这种图称为树。&lt;/p&gt;
&lt;p&gt;生成树 （Spanning Tree）：无向连通图G的一个子图如果是一颗包含G的所有顶点的树，则该子图称为G的生成树。&lt;/p&gt;
      
    
    </summary>
    
      <category term="c++/算法" scheme="https://lkdnjhhb.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="https://lkdnjhhb.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树之prim算法</title>
    <link href="https://lkdnjhhb.github.io/2018/11/30/prim%E7%AE%97%E6%B3%95/"/>
    <id>https://lkdnjhhb.github.io/2018/11/30/prim算法/</id>
    <published>2018-11-30T06:18:09.000Z</published>
    <updated>2018-11-30T06:29:40.628Z</updated>
    
    <content type="html"><![CDATA[<p>如果一个算法文字描述不清楚，就说明思路不清楚，也不可能写好。</p><p>prim算法是实现图的最小生成树。既然是图，就假设包含n个顶点，m条边。prim算法是从顶点出发的，其算法时间复杂度与顶点数目有关系。</p><p>（注意：prim算法适合稠密图，其时间复杂度为O(n^2)，其时间复杂度与边得数目无关，而kruskal算法的时间复杂度为O(eloge)跟边的数目有关，适合稀疏图。）</p><p>算法思路：从某个顶点开始，假设v0，此时v0属于最小生成树结点中的一个元素，该集合假设u，剩下的V-v0为待判定的点，此时选取u中的顶点到V-v0中顶点的一个路径最小的边，并且将其中非u中的顶点加入到u中，循环直到u中的顶点包含图所有的顶点为止。<br>算法在选取最小路径的时候需要优化，具体思路：w[]数组保存各个顶点的最短路径，b[]数组保存到i顶点最短路径的顶点，比如，到0号顶点最短的路径是&lt;v0,v3&gt;，那么w[0]=&lt;v0,v3&gt;，b[0]=3；这样每次找最小路径就不是o(n*n)的代价。代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//prim算法</span><br><span class="line">template&lt;class VertexType, class ArcType&gt;</span><br><span class="line">void prim(MGraph&lt;VertexType,ArcType&gt; G) &#123;</span><br><span class="line">shortEdge&lt;VertexType, ArcType&gt; *shortedge=new shortEdge&lt;VertexType, ArcType&gt;[G.vertexNum];</span><br><span class="line">for (int i = 0; i &lt; G.vertexNum; i++) &#123;</span><br><span class="line">shortedge[i].lowcost = G.arc[0][i];</span><br><span class="line">shortedge[i].adjvex = G.vertex[0];</span><br><span class="line">&#125;</span><br><span class="line">shortedge[0].lowcost = 0;</span><br><span class="line">for (int i = 1; i &lt; G.vertexNum; i++) &#123;</span><br><span class="line">int k = MinEnge(shortedge, G.vertexNum);</span><br><span class="line">cout &lt;&lt; &quot;(&quot; &lt;&lt; shortedge[k].adjvex &lt;&lt; G.vertex[k] &lt;&lt; &quot;)&quot; &lt;&lt; shortedge[k].lowcost &lt;&lt; endl;</span><br><span class="line">shortedge[k].lowcost = 0;</span><br><span class="line">for (int j = 1; j &lt; G.vertexNum; j++) &#123;</span><br><span class="line">if (G.arc[k][j] &lt; shortedge[j].lowcost) &#123;</span><br><span class="line">shortedge[j].lowcost = G.arc[k][j];</span><br><span class="line">shortedge[j].adjvex = G.vertex[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">template&lt;class VertexType, class ArcType&gt; </span><br><span class="line">//查找集合中最短边</span><br><span class="line">int  MinEnge(shortEdge&lt;VertexType, ArcType&gt; shortenge[],int vertexNum) &#123;</span><br><span class="line">int k;</span><br><span class="line">for (int i = 0; i &lt; vertexNum; i++) &#123;</span><br><span class="line">if (shortenge[i].lowcost != 0) &#123;</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for (int i = 0; i &lt; vertexNum; i++) &#123;</span><br><span class="line">if (shortenge[i].lowcost != 0 &amp;&amp; shortenge[i].lowcost &lt; shortenge[k].lowcost)</span><br><span class="line">k = i;</span><br><span class="line">&#125;</span><br><span class="line">return k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果一个算法文字描述不清楚，就说明思路不清楚，也不可能写好。&lt;/p&gt;
&lt;p&gt;prim算法是实现图的最小生成树。既然是图，就假设包含n个顶点，m条边。prim算法是从顶点出发的，其算法时间复杂度与顶点数目有关系。&lt;/p&gt;
&lt;p&gt;（注意：prim算法适合稠密图，其时间复杂度为O
      
    
    </summary>
    
      <category term="c++/算法" scheme="https://lkdnjhhb.github.io/categories/c-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c++" scheme="https://lkdnjhhb.github.io/tags/c/"/>
    
      <category term="算法" scheme="https://lkdnjhhb.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
